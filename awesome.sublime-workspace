{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"date",
				"datewidget"
			],
			[
				"events",
				"eventsCount"
			],
			[
				"from",
				"from_now"
			],
			[
				"updated",
				"updated_at"
			],
			[
				"crea",
				"created_at"
			],
			[
				"tag",
				"tagsArray"
			],
			[
				"eve",
				"event_url"
			],
			[
				"even",
				"event_short_description"
			],
			[
				"event",
				"eventHash"
			],
			[
				"to",
				"to_json"
			],
			[
				"ev",
				"event_short_description"
			],
			[
				"desc",
				"description"
			],
			[
				"find",
				"find_or_initialize_by_id"
			],
			[
				"place",
				"placeHash"
			],
			[
				"raw",
				"raw_post"
			],
			[
				"rand",
				"randomEvent"
			],
			[
				"organ",
				"organizations"
			],
			[
				"close",
				"closedOrg"
			],
			[
				"Closed",
				"ClosedOrganization"
			],
			[
				"clos",
				"closedOrganizations"
			],
			[
				"Orga",
				"organization"
			],
			[
				"return",
				"returnedTags"
			],
			[
				"num",
				"numTags"
			],
			[
				"cre",
				"create"
			],
			[
				"rando",
				"randomEventIds"
			],
			[
				"feat",
				"featured_event"
			],
			[
				"orga",
				"organization"
			],
			[
				"with",
				"with_place"
			],
			[
				"create",
				"create_list"
			],
			[
				"crate",
				"create_list"
			],
			[
				"all",
				"all_day"
			],
			[
				"specia",
				"specials"
			],
			[
				"org",
				"organization"
			],
			[
				"make",
				"makeRequest"
			],
			[
				"dail",
				"dailySpecials"
			],
			[
				"special",
				"specialsWithTitle"
			],
			[
				"nums",
				"numSpecialsWithTitle"
			],
			[
				"recur",
				"recurs_sunday"
			],
			[
				"fail",
				"failureStatus"
			],
			[
				"random",
				"randomEvent"
			],
			[
				"feature",
				"featured_event"
			],
			[
				"featu",
				"featured_event"
			],
			[
				"app",
				"ApplicationController"
			],
			[
				"All",
				"AllSpecials"
			],
			[
				"allSp",
				"AllSpecials"
			],
			[
				"rest",
				"restaurants"
			],
			[
				"swap",
				"swapTab"
			],
			[
				"allres",
				"allRestaurantSpecialsTab"
			],
			[
				"allre",
				"allRestaurantSpecialsTab"
			],
			[
				"Co",
				"Collections"
			],
			[
				"item--no-",
				"item--no-image-show-restaurant"
			],
			[
				"restau",
				"restaurant"
			],
			[
				"_fet",
				"_fetchSpecials"
			],
			[
				"_ge",
				"_getModel"
			],
			[
				"spec",
				"specials_json"
			],
			[
				"_S",
				"_snakeHead"
			],
			[
				"Sna",
				"Snake"
			],
			[
				"_sna",
				"_snakeHead"
			],
			[
				"getSn",
				"getSnakeHead"
			],
			[
				"Snak",
				"SnakeHead"
			],
			[
				"next",
				"nextPosition"
			],
			[
				"snakeH",
				"snakeHead"
			],
			[
				"sna",
				"SnakeHead"
			],
			[
				"snake",
				"snakeHeadCol"
			],
			[
				"Sn",
				"SnakeHead"
			],
			[
				"dir",
				"direction"
			],
			[
				"direction",
				"_direction"
			],
			[
				"_b",
				"_boardCols"
			],
			[
				"_boa",
				"_boardRows"
			],
			[
				"getGa",
				"getGame"
			],
			[
				"getGame",
				"getGameAsHtml"
			],
			[
				"backg",
				"background-color"
			],
			[
				"_boar",
				"_boardCols"
			],
			[
				"boar",
				"Board"
			],
			[
				"board",
				"boardRows"
			],
			[
				"FOS",
				"FOSUserBundle"
			],
			[
				"doctr",
				"doctrine-orm-admin-bundle"
			],
			[
				"R",
				"ROLE_USER"
			],
			[
				"T",
				"TmercBossBundle:Queue [Entity]"
			],
			[
				"Tmerc",
				"TmercBossBundle:Queue:Index.html.twig [Tpl]"
			],
			[
				"Application",
				"Application_Model_QueueTable"
			],
			[
				"toggle",
				"toggleAllday"
			],
			[
				"ti",
				"ticket_id"
			],
			[
				"ticket",
				"ticket_id"
			]
		]
	},
	"buffers":
	[
		{
			"file": "rc.lua.new",
			"settings":
			{
				"buffer_size": 41271,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "---[[                                          ]]--\n--                                               -\n--    Powearrow Darker Awesome WM 3.5.+ config   --\n--           github.com/copycat-killer           --\n--                                               -\n--[[                                           ]]--\n\n\n-- {{{ Required Libraries\n\ngears 	        = require(\"gears\")\nawful           = require(\"awful\")\nawful.rules     = require(\"awful.rules\")\nawful.autofocus = require(\"awful.autofocus\")\nwibox           = require(\"wibox\")\nbeautiful       = require(\"beautiful\")\nnaughty         = require(\"naughty\")\nvicious         = require(\"vicious\")\nscratch         = require(\"scratch\")\n\n-- }}}\n\n-- {{{ Autostart\n\nfunction run_once(cmd)\n  findme = cmd\n  firstspace = cmd:find(\" \")\n  if firstspace then\n     findme = cmd:sub(0, firstspace-1)\n  end\n  awful.util.spawn_with_shell(\"pgrep -u $USER -x \" .. findme .. \" > /dev/null || (\" .. cmd .. \")\")\n end \n\nrun_once(\"urxvtd\")\nrun_once(\"unclutter -idle 10\")\n\n-- }}}\n\n-- {{{ Localization\n\nos.setlocale(os.getenv(\"LANG\"))\n\n-- }}}\n\n-- {{{ Error Handling\n\n-- Check if awesome encountered an error during startup and fell back to\n-- another config (This code will only ever execute for the fallback config)\nif awesome.startup_errors then\n    naughty.notify({ preset = naughty.config.presets.critical,\n                     title = \"Oops, there were errors during startup!\",\n                     text = awesome.startup_errors })\nend\n\n-- Handle runtime errors after startup\ndo\n    in_error = false\n    awesome.connect_signal(\"debug::error\", function (err)\n        -- Make sure we don't go into an endless error loop\n        if in_error then return end\n        in_error = true\n\n        naughty.notify({ preset = naughty.config.presets.critical,\n                         title = \"Oops, an error happened!\",\n                         text = err })\n        in_error = false\n    end)\nend\n\n-- }}}\n\n-- {{{ Variable Definitions\n\n-- Useful Paths\nhome = os.getenv(\"HOME\")\nconfdir = home .. \"/.config/awesome\"\nscriptdir = confdir .. \"/scripts/\"\nthemes = confdir .. \"/themes\"\nactive_theme = themes .. \"/powerarrow-darker\"\n\n-- Themes define colours, icons, and wallpapers\nbeautiful.init(active_theme .. \"/theme.lua\")\n\nterminal = \"urxvtc\"\neditor = \"vim\"\neditor_cmd = terminal .. \" -e \" .. editor\ngui_editor = \"geany -ps\"\nbrowser = \"dwb\"\nbrowser2 = \"midori\"\nmail = terminal .. \" -e mutt \"\nchat = terminal .. \" -e irssi \"\ntasks = terminal .. \" -e htop \"\niptraf = terminal .. \" -g 180x54-20+34 -e sudo iptraf-ng -i all \"\nmusicplr = terminal .. \" -g 130x34-320+16 -e ncmpcpp \"\n\n-- Default modkey.\n-- Usually, Mod4 is the key with a logo between Control and Alt.\n-- If you do not like this or do not have such a key,\n-- I suggest you to remap Mod4 to another key using xmodmap or other tools.\n-- However, you can use another modifier like Mod1, but it may interact with others.\nmodkey = \"Mod4\"\naltkey = \"Mod1\"\n\n-- Table of layouts to cover with awful.layout.inc, order matters.\nlayouts =\n{\n    awful.layout.suit.floating,             -- 1\n    awful.layout.suit.tile,                 -- 2\n    awful.layout.suit.tile.left,            -- 3\n    awful.layout.suit.tile.bottom,          -- 4\n    awful.layout.suit.tile.top,             -- 5\n    awful.layout.suit.fair,                 -- 6\n    awful.layout.suit.fair.horizontal,      -- 7\n    awful.layout.suit.spiral,               -- 8\n    awful.layout.suit.spiral.dwindle,       -- 9\n    awful.layout.suit.max,                  -- 10\n    --awful.layout.suit.max.fullscreen,     -- 11\n    --awful.layout.suit.magnifier           -- 12\n}\n\n-- }}}\n\n-- {{{ Wallpaper\n\nif beautiful.wallpaper then\n    for s = 1, screen.count() do\n        gears.wallpaper.maximized(beautiful.wallpaper, s, true)\n    end\nend\n\n-- }}}\n                \n-- {{{ Tags\n\n-- Define a tag table which hold all screen tags.\ntags = {\n       names = { \"1\", \"2\", \"3\", \"4\", \"5\",\"6\",\"7\",\"8\",\"9\"},\n       layout = layouts\n       }\nfor s = 1, screen.count() do\n-- Each screen has its own tag table.\n   tags[s] = awful.tag(tags.names, s, tags.layout)\nend\n-- }}}\n                                          \n-- {{{ Menu\nmyaccessories = {\n   { \"archives\", \"7zFM\" },\n   { \"file manager\", \"spacefm\" },\n   { \"editor\", gui_editor },\n}\nmyinternet = {\n    { \"browser\", browser },\n    { \"irc client\" , chat },\n    { \"torrent\" , \"rtorrent\" },\n    { \"torrtux\" , terminal .. \" -e torrtux \" },\n    { \"torrent search\" , \"torrent-search\" }\n}\nmygames = {\n    { \"NES\", \"fceux\" },\n    { \"Super NES\", \"zsnes\" },\n}\nmygraphics = {\n    { \"gimp\" , \"gimp\" },\n    { \"inkscape\", \"inkscape\" },\n    { \"dia\", \"dia\" },\n    { \"image viewer\" , \"viewnior\" }\n}\nmyoffice = {\n    { \"writer\" , \"lowriter\" },\n    { \"impress\" , \"loimpress\" },\n}\nmysystem = {\n    { \"appearance\" , \"lxappearance\" },\n    { \"cleaning\" , \"bleachbit\" },\n    { \"powertop\" , terminal .. \" -e sudo powertop \" },\n    { \"task manager\" , tasks }\n}\nmymainmenu = awful.menu({ items = {\n				    { \"accessories\" , myaccessories },\n				    { \"graphics\" , mygraphics },\n				    { \"internet\" , myinternet },\n				    { \"games\" , mygames },\n				    { \"office\" , myoffice },\n				    { \"system\" , mysystem },\n            }\n            })\nmylauncher = awful.widget.launcher({ image = beautiful.awesome_icon,\n                                     menu = mymainmenu })\n-- }}}\n\n-- {{{ Wibox\n\n-- Colours\ncoldef  = \"</span>\"\ncolwhi  = \"<span color='#b2b2b2'>\"\nred = \"<span color='#e54c62'>\"\n\n-- Textclock widget\nclockicon = wibox.widget.imagebox()\nclockicon:set_image(beautiful.widget_clock)\nmytextclock = awful.widget.textclock(\"<span font=\\\"Terminus 12\\\"><span font=\\\"Terminus 9\\\" color=\\\"#DDDDFF\\\"> %a %d %b  %H:%M</span></span>\")\n\n-- Calendar attached to the textclock\nlocal os = os\nlocal string = string\nlocal table = table\nlocal util = awful.util\n\nchar_width = nil\ntext_color = theme.fg_normal or \"#FFFFFF\"\ntoday_color = theme.tasklist_fg_focus or \"#FF7100\"\ncalendar_width = 21\n\nlocal calendar = nil\nlocal offset = 0\n\nlocal data = nil\n\nlocal function pop_spaces(s1, s2, maxsize)\n   local sps = \"\"\n   for i = 1, maxsize - string.len(s1) - string.len(s2) do\n      sps = sps .. \" \"\n   end\n   return s1 .. sps .. s2\nend\n\nlocal function create_calendar()\n   offset = offset or 0\n\n   local now = os.date(\"*t\")\n   local cal_month = now.month + offset\n   local cal_year = now.year\n   if cal_month > 12 then\n      cal_month = (cal_month % 12)\n      cal_year = cal_year + 1\n   elseif cal_month < 1 then\n      cal_month = (cal_month + 12)\n      cal_year = cal_year - 1\n   end\n\n   local last_day = os.date(\"%d\", os.time({ day = 1, year = cal_year,\n                                            month = cal_month + 1}) - 86400)\n   local first_day = os.time({ day = 1, month = cal_month, year = cal_year})\n   local first_day_in_week =\n      os.date(\"%w\", first_day)\n   local result = \"do lu ma me gi ve sa\\n\"\n   for i = 1, first_day_in_week do\n      result = result .. \"   \"\n   end\n\n   local this_month = false\n   for day = 1, last_day do\n      local last_in_week = (day + first_day_in_week) % 7 == 0\n      local day_str = pop_spaces(\"\", day, 2) .. (last_in_week and \"\" or \" \")\n      if cal_month == now.month and cal_year == now.year and day == now.day then\n         this_month = true\n         result = result ..\n            string.format('<span weight=\"bold\" foreground = \"%s\">%s</span>',\n                          today_color, day_str)\n      else\n         result = result .. day_str\n      end\n      if last_in_week and day ~= last_day then\n         result = result .. \"\\n\"\n      end\n   end\n\n   local header\n   if this_month then\n      header = os.date(\"%a, %d %b %Y\")\n   else\n      header = os.date(\"%B %Y\", first_day)\n   end\n   return header, string.format('<span font=\"%s\" foreground=\"%s\">%s</span>',\n                                theme.font, text_color, result)\nend\n\nlocal function calculate_char_width()\n   return beautiful.get_font_height(theme.font) * 0.555\nend\n\nfunction hide()\n   if calendar ~= nil then\n      naughty.destroy(calendar)\n      calendar = nil\n      offset = 0\n   end\nend\n\nfunction show(inc_offset)\n   inc_offset = inc_offset or 0\n\n   local save_offset = offset\n   hide()\n   offset = save_offset + inc_offset\n\n   local char_width = char_width or calculate_char_width()\n   local header, cal_text = create_calendar()\n   calendar = naughty.notify({ title = header,\n                               text = cal_text,\n                               timeout = 0, hover_timeout = 0.5,\n                            })\nend\n\nmytextclock:connect_signal(\"mouse::enter\", function() show(0) end)\nmytextclock:connect_signal(\"mouse::leave\", hide)\nmytextclock:buttons(util.table.join( awful.button({ }, 1, function() show(-1) end),\n                                     awful.button({ }, 3, function() show(1) end)))\n\n-- Mail widget\nmygmail = wibox.widget.textbox()\nnotify_shown = false\ngmail_t = awful.tooltip({ objects = { mygmail },})\nmygmailimg = wibox.widget.imagebox(beautiful.widget_mail)\nvicious.register(mygmail, vicious.widgets.gmail,\nfunction (widget, args)\n  notify_title = \"Hai un nuovo messaggio\"\n  notify_text = '\"' .. args[\"{subject}\"] .. '\"'\n  gmail_t:set_text(args[\"{subject}\"])\n  gmail_t:add_to_object(mygmailimg)\n  if (args[\"{count}\"] > 0) then\n    if (notify_shown == false) then\n      if (args[\"{count}\"] > 1) then \n          notify_title = \"Hai \" .. args[\"{count}\"] .. \" nuovi messaggi\"\n          notify_text = 'Ultimo: \"' .. args[\"{subject}\"] .. '\"'\n      else\n          notify_title = \"Hai un nuovo messaggio\"\n          notify_text = args[\"{subject}\"]\n      end\n      naughty.notify({ title = notify_title, text = notify_text,\n      timeout = 7,\n      position = \"top_left\",\n      icon = beautiful.widget_mail_notify,\n      fg = beautiful.fg_urgent,\n      bg = beautiful.bg_urgent })\n      notify_shown = true\n    end\n    return '<span background=\"#313131\" font=\"Terminus 13\" rise=\"2000\"> <span font=\"Terminus 9\">' .. args[\"{count}\"] .. ' </span></span>'\n  else\n    notify_shown = false\n    return \"\"\n  end\nend, 60)\nmygmail:buttons(awful.util.table.join(awful.button({ }, 1, function () awful.util.spawn(mail, false) end)))\n\n-- Music widget\nmpdwidget = wibox.widget.textbox()\nmpdicon = wibox.widget.imagebox()\nmpdicon:set_image(beautiful.widget_music)\nmpdicon:buttons(awful.util.table.join(awful.button({ }, 1, function () awful.util.spawn_with_shell(musicplr) end)))\n\nvicious.register(mpdwidget, vicious.widgets.mpd,\nfunction(widget, args)\n	-- play\n	if (args[\"{state}\"] == \"Play\") then\n    mpdicon:set_image(beautiful.widget_music_on)\n		return \"<span background='#313131' font='Terminus 13' rise='2000'> <span font='Terminus 9'>\" .. red .. args[\"{Title}\"] .. coldef .. colwhi .. \" - \" .. coldef .. colwhi  .. args[\"{Artist}\"] .. coldef .. \" </span></span>\"\n	-- pause\n	elseif (args[\"{state}\"] == \"Pause\") then\n    mpdicon:set_image(beautiful.widget_music)\n		return \"<span background='#313131' font='Terminus 13' rise='2000'> <span font='Terminus 9'>\" .. colwhi .. \"mpd in pausa\" .. coldef .. \" </span></span>\"\n	else\n    mpdicon:set_image(beautiful.widget_music)\n		return \"\"\n	end\nend, 1)\n\n-- MEM widget\nmemicon = wibox.widget.imagebox()\nmemicon:set_image(beautiful.widget_mem)\nmemwidget = wibox.widget.textbox()\nvicious.register(memwidget, vicious.widgets.mem, ' $2MB ', 13)\n\n-- CPU widget\ncpuicon = wibox.widget.imagebox()\ncpuicon:set_image(beautiful.widget_cpu)\ncpuwidget = wibox.widget.textbox()\nvicious.register(cpuwidget, vicious.widgets.cpu, '<span background=\"#313131\" font=\"Terminus 13\" rise=\"2000\"> <span font=\"Terminus 9\">$1% </span></span>', 3)\ncpuicon:buttons(awful.util.table.join(awful.button({ }, 1, function () awful.util.spawn(tasks, false) end)))\n\n-- Temp widget\ntempicon = wibox.widget.imagebox()\ntempicon:set_image(beautiful.widget_temp)\ntempicon:buttons(awful.util.table.join(awful.button({ }, 1, function () awful.util.spawn(terminal .. \" -e sudo powertop \", false) end)))\ntempwidget = wibox.widget.textbox()\nvicious.register(tempwidget, vicious.widgets.thermal, '<span font=\"Terminus 12\"> <span font=\"Terminus 9\">$1°C </span></span>', 9, {\"coretemp.0\", \"core\"} )\n\n-- /home fs widget\nfshicon = wibox.widget.imagebox()\nfshicon:set_image(beautiful.widget_hdd)\nfshwidget = wibox.widget.textbox()\nvicious.register(fshwidget, vicious.widgets.fs,\nfunction (widget, args)\n  if args[\"{/home used_p}\"] >= 95 and args[\"{/home used_p}\"] < 99 then\n    return '<span background=\"#313131\" font=\"Terminus 13\" rise=\"2000\"> <span font=\"Terminus 9\">' .. args[\"{/home used_p}\"] .. '% </span></span>' \n  elseif args[\"{/home used_p}\"] >= 99 and args[\"{/home used_p}\"] <= 100 then\n    naughty.notify({ title = \"Attenzione\", text = \"Partizione /home esaurita!\\nFa' un po' di spazio.\",\n    timeout = 10,\n    position = \"top_right\",\n    fg = beautiful.fg_urgent,\n    bg = beautiful.bg_urgent })\n    return '<span background=\"#313131\" font=\"Terminus 13\" rise=\"2000\"> <span font=\"Terminus 9\">' .. args[\"{/home used_p}\"] .. '% </span></span>' \n  else\n    return '<span background=\"#313131\" font=\"Terminus 13\" rise=\"2000\"> <span font=\"Terminus 9\">' .. args[\"{/home used_p}\"] .. '% </span></span>' \n  end\nend, 600)\n\n\nlocal infos = nil\n\nfunction remove_info()\n    if infos ~= nil then \n        naughty.destroy(infos)\n        infos = nil\n    end\nend\n\nfunction add_info()\n    remove_info()\n    local capi = {\n		mouse = mouse,\n		screen = screen\n	  }\n    local cal = awful.util.pread(scriptdir .. \"dfs\")\n    cal = string.gsub(cal, \"          ^%s*(.-)%s*$\", \"%1\")\n    infos = naughty.notify({\n        text = string.format('<span font_desc=\"%s\">%s</span>', \"Terminus\", cal),\n      	timeout = 0,\n        position = \"top_right\",\n        margin = 10,\n        height = 170,\n        width = 585,\n        screen	= capi.mouse.screen\n    })\nend\n\nfshicon:connect_signal('mouse::enter', function () add_info() end)\nfshicon:connect_signal('mouse::leave', function () remove_info() end)\n\n-- Battery widget\nbaticon = wibox.widget.imagebox()\nbaticon:set_image(beautiful.widget_battery)\n\nfunction batstate()\n\n  local file = io.open(\"/sys/class/power_supply/BAT0/status\", \"r\")\n\n  if (file == nil) then\n    return \"Cable plugged\"\n  end\n\n  local batstate = file:read(\"*line\")\n  file:close()\n\n  if (batstate == 'Discharging' or batstate == 'Charging') then\n    return batstate\n  else\n    return \"Fully charged\"\n  end\nend\n\nbatwidget = wibox.widget.textbox()\nvicious.register(batwidget, vicious.widgets.bat,\nfunction (widget, args)\n  -- plugged\n  if (batstate() == 'Cable plugged' or batstate() == 'Unknown') then\n    baticon:set_image(beautiful.widget_ac)     \n    return '<span font=\"Terminus 12\"> <span font=\"Terminus 9\">AC </span></span>'\n    -- critical\n  elseif (args[2] <= 5 and batstate() == 'Discharging') then\n    baticon:set_image(beautiful.widget_battery_empty)\n    naughty.notify({\n      text = \"sto per spegnermi...\",\n      title = \"Carica quasi esaurita!\",\n      position = \"top_right\",\n      timeout = 1,\n      fg=\"#000000\",\n      bg=\"#ffffff\",\n      screen = 1,\n      ontop = true,\n    })\n    -- low\n  elseif (args[2] <= 10 and batstate() == 'Discharging') then\n    baticon:set_image(beautiful.widget_battery_low)\n    naughty.notify({\n      text = \"attacca il cavo!\",\n      title = \"Carica bassa\",\n      position = \"top_right\",\n      timeout = 1,\n      fg=\"#ffffff\",\n      bg=\"#262729\",\n      screen = 1,\n      ontop = true,\n    })\n   else baticon:set_image(beautiful.widget_battery)\n  end\n    return '<span font=\"Terminus 12\"> <span font=\"Terminus 9\">' .. args[2] .. '% </span></span>'\nend, 1, 'BAT0')\n\n-- Volume widget\nvolicon = wibox.widget.imagebox()\nvolicon:set_image(beautiful.widget_vol)\nvolumewidget = wibox.widget.textbox()\nvicious.register(volumewidget, vicious.widgets.volume,  \nfunction (widget, args)\n  if (args[2] ~= \"♩\" ) then \n      if (args[1] == 0) then volicon:set_image(beautiful.widget_vol_no)\n      elseif (args[1] <= 50) then  volicon:set_image(beautiful.widget_vol_low)\n      else volicon:set_image(beautiful.widget_vol)\n      end\n  else volicon:set_image(beautiful.widget_vol_mute) \n  end\n  return '<span font=\"Terminus 12\"> <span font=\"Terminus 9\">' .. args[1] .. '% </span></span>'\nend, 1, \"Master\")\n\n-- Net widget\nnetwidget = wibox.widget.textbox()\nvicious.register(netwidget, vicious.widgets.net, '<span background=\"#313131\" font=\"Terminus 13\" rise=\"2000\"> <span font=\"Terminus 9\" color=\"#7AC82E\">${wlan0 down_kb}</span> <span font=\"Terminus 7\" color=\"#EEDDDD\">↓↑</span> <span font=\"Terminus 9\" color=\"#46A8C3\">${wlan0 up_kb} </span></span>', 3)\nneticon = wibox.widget.imagebox()\nneticon:set_image(beautiful.widget_net)\nnetwidget:buttons(awful.util.table.join(awful.button({ }, 1, function () awful.util.spawn_with_shell(iptraf) end)))\n\n-- Separators\nspr = wibox.widget.textbox(' ')\narrl = wibox.widget.imagebox()\narrl:set_image(beautiful.arrl)\narrl_dl = wibox.widget.imagebox()\narrl_dl:set_image(beautiful.arrl_dl)\narrl_ld = wibox.widget.imagebox()\narrl_ld:set_image(beautiful.arrl_ld)\n\n-- }}}\n\n-- {{{ Layout\n\n-- Create a wibox for each screen and add it\nmywibox = {}\nmypromptbox = {}\nmylayoutbox = {}\nmytaglist = {}\nmytaglist.buttons = awful.util.table.join(\n                    awful.button({ }, 1, awful.tag.viewonly),\n                    awful.button({ modkey }, 1, awful.client.movetotag),\n                    awful.button({ }, 3, awful.tag.viewtoggle),\n                    awful.button({ modkey }, 3, awful.client.toggletag),\n                    awful.button({ }, 4, function(t) awful.tag.viewnext(awful.tag.getscreen(t)) end),\n                    awful.button({ }, 5, function(t) awful.tag.viewprev(awful.tag.getscreen(t)) end)\n                    )\nmytasklist = {}\nmytasklist.buttons = awful.util.table.join(\n                     awful.button({ }, 1, function (c)\n                                              if c == client.focus then\n                                                  c.minimized = true\n                                              else\n                                                  -- Without this, the following\n                                                  -- :isvisible() makes no sense\n                                                  c.minimized = false\n                                                  if not c:isvisible() then\n                                                      awful.tag.viewonly(c:tags()[1])\n                                                  end\n                                                  -- This will also un-minimize\n                                                  -- the client, if needed\n                                                  client.focus = c\n                                                  c:raise()\n                                              end\n                                          end),\n                     awful.button({ }, 3, function ()\n                                              if instance then\n                                                  instance:hide()\n                                                  instance = nil\n                                              else\n                                                  instance = awful.menu.clients({ width=250 })\n                                              end\n                                          end),\n                     awful.button({ }, 4, function ()\n                                              awful.client.focus.byidx(1)\n                                              if client.focus then client.focus:raise() end\n                                          end),\n                     awful.button({ }, 5, function ()\n                                              awful.client.focus.byidx(-1)\n                                              if client.focus then client.focus:raise() end\n                                          end))\n\nfor s = 1, screen.count() do\n    \n    -- Create a promptbox for each screen\n    mypromptbox[s] = awful.widget.prompt()\n\n    -- We need one layoutbox per screen.\n    mylayoutbox[s] = awful.widget.layoutbox(s)\n    mylayoutbox[s]:buttons(awful.util.table.join(\n                            awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),\n                            awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),\n                            awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),\n                            awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))\n\n    -- Create a taglist widget\n    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.filter.all, mytaglist.buttons)\n\n    -- Create a tasklist widget\n    mytasklist[s] = awful.widget.tasklist(s, awful.widget.tasklist.filter.currenttags, mytasklist.buttons)\n\n    -- Create the upper wibox\n    mywibox[s] = awful.wibox({ position = \"top\", screen = s, height = 18 }) \n        \n    -- Widgets that are aligned to the upper left\n    local left_layout = wibox.layout.fixed.horizontal()\n    left_layout:add(spr)\n    left_layout:add(mytaglist[s])\n    left_layout:add(mypromptbox[s])\n    left_layout:add(spr)\n\n    -- Widgets that are aligned to the upper right\n    local right_layout = wibox.layout.fixed.horizontal()\n    if s == 1 then right_layout:add(wibox.widget.systray()) end\n    right_layout:add(spr)\n    right_layout:add(arrl)\n    right_layout:add(arrl_ld)\n    right_layout:add(mpdicon)\n    right_layout:add(mpdwidget)\n    right_layout:add(arrl_dl)\n    right_layout:add(volicon)\n    right_layout:add(volumewidget)\n    right_layout:add(arrl_ld)\n    right_layout:add(mygmailimg)\n    right_layout:add(mygmail)\n    right_layout:add(arrl_dl)\n    right_layout:add(memicon)\n    right_layout:add(memwidget)\n    right_layout:add(arrl_ld)\n    right_layout:add(cpuicon)\n    right_layout:add(cpuwidget)    \n    right_layout:add(arrl_dl)\n    right_layout:add(tempicon)\n    right_layout:add(tempwidget)\n    right_layout:add(arrl_ld)\n    right_layout:add(fshicon)\n    right_layout:add(fshwidget)\n    right_layout:add(arrl_dl)     \n    right_layout:add(baticon)\n    right_layout:add(batwidget)\n    right_layout:add(arrl_ld)\n    right_layout:add(neticon)\n    right_layout:add(netwidget)\n    right_layout:add(arrl_dl)\n    right_layout:add(mytextclock)\n    right_layout:add(spr)\n    right_layout:add(arrl_ld)\n    right_layout:add(mylayoutbox[s])\n\n    -- Now bring it all together (with the tasklist in the middle)\n    local layout = wibox.layout.align.horizontal()\n    layout:set_left(left_layout)\n    layout:set_middle(mytasklist[s])\n    layout:set_right(right_layout)    \n    mywibox[s]:set_widget(layout)\n\nend\n\n-- }}}\n\n-- {{{ Mouse Bindings\n\nroot.buttons(awful.util.table.join(\n    awful.button({ }, 4, awful.tag.viewnext),\n    awful.button({ }, 5, awful.tag.viewprev)\n))\n\n-- }}}\n\n-- {{{ Key bindings\nglobalkeys = awful.util.table.join(\n\n    -- Capture a screenshot\n    awful.key({ altkey }, \"p\", function() awful.util.spawn(\"screenshot\",false) end),\n    -- Menubar\n    awful.key({ modkey }, \"p\", function() menubar.show() end),\n    -- Move clients\n    awful.key({ altkey }, \"Next\",  function () awful.client.moveresize( 1,  1, -2, -2) end),\n    awful.key({ altkey }, \"Prior\", function () awful.client.moveresize(-1, -1,  2,  2) end),\n    awful.key({ altkey }, \"Down\",  function () awful.client.moveresize(  0,  1,   0,   0) end),\n    awful.key({ altkey }, \"Up\",    function () awful.client.moveresize(  0, -1,   0,   0) end),\n    awful.key({ altkey }, \"Left\",  function () awful.client.moveresize(-1,   0,   0,   0) end),\n    awful.key({ altkey }, \"Right\", function () awful.client.moveresize( 1,   0,   0,   0) end),\n    awful.key({ modkey,           }, \"Left\",   awful.tag.viewprev       ),\n    awful.key({ modkey,           }, \"Right\",  awful.tag.viewnext       ),\n    awful.key({ modkey,           }, \"Escape\", awful.tag.history.restore),\n    awful.key({ modkey,           }, \"k\",\n        function ()\n            awful.client.focus.byidx( 1)\n            if client.focus then client.focus:raise() end\n        end),\n    awful.key({ modkey,           }, \"j\",\n        function ()\n            awful.client.focus.byidx(-1)\n            if client.focus then client.focus:raise() end\n        end),\n    awful.key({ modkey,           }, \"w\", function () mymainmenu:show({keygrabber=true}) end),\n\n    -- Show/Hide Wibox\n    awful.key({ modkey }, \"b\", function ()\n    mywibox[mouse.screen].visible = not mywibox[mouse.screen].visible\n    end),\n\n    -- Layout manipulation\n    awful.key({ modkey, \"Shift\"   }, \"j\", function () awful.client.swap.byidx(  1)    end),\n    awful.key({ modkey, \"Shift\"   }, \"k\", function () awful.client.swap.byidx( -1)    end),\n    awful.key({ modkey, \"Control\" }, \"j\", function () awful.screen.focus_relative( 1) end),\n    awful.key({ modkey, \"Control\" }, \"k\", function () awful.screen.focus_relative(-1) end),\n    awful.key({ modkey,           }, \"u\", awful.client.urgent.jumpto),\n    awful.key({ modkey,           }, \"Tab\",\n        function ()\n            awful.client.focus.history.previous()\n            if client.focus then\n                client.focus:raise()\n            end\n        end),\n\n    -- Standard program\n    awful.key({ modkey,           }, \"Return\", function () awful.util.spawn(terminal) end),\n    awful.key({ modkey, \"Control\" }, \"r\", awesome.restart),\n    awful.key({ modkey, \"Shift\"   }, \"q\", awesome.quit),\n    awful.key({ modkey,           }, \"l\",     function () awful.tag.incmwfact( 0.05)     end),\n    awful.key({ modkey,           }, \"h\",     function () awful.tag.incmwfact(-0.05)     end),\n    awful.key({ modkey, \"Shift\"   }, \"h\",     function () awful.tag.incnmaster( 1)       end),\n    awful.key({ modkey, \"Shift\"   }, \"l\",     function () awful.tag.incnmaster(-1)       end),\n    awful.key({ modkey, \"Control\" }, \"h\",     function () awful.tag.incncol( 1)          end),\n    awful.key({ modkey, \"Control\" }, \"l\",     function () awful.tag.incncol(-1)          end),\n    awful.key({ modkey,           }, \"space\", function () awful.layout.inc(layouts,  1)  end),\n    awful.key({ modkey, \"Shift\"   }, \"space\", function () awful.layout.inc(layouts, -1)  end),\n    awful.key({ modkey, \"Control\" }, \"n\", awful.client.restore),\n\n    -- Dropdown terminal\n    awful.key({ modkey,	          }, \"z\",     function () scratch.drop(terminal) end),\n\n    -- Widgets popups\n    awful.key({ altkey,           }, \"c\",     function () add_calendar(7) end),\n\n    -- Volume control\n    awful.key({ \"Control\" }, \"Up\", function ()\n                                       awful.util.spawn(\"amixer set Master playback 1%+\", false )\n                                       vicious.force({ volumewidget })\n                                   end),\n    awful.key({ \"Control\" }, \"Down\", function ()\n                                       awful.util.spawn(\"amixer set Master playback 1%-\", false )\n                                       vicious.force({ volumewidget })\n                                     end),\n    awful.key({ \"Control\" }, \"m\", function ()\n                                       awful.util.spawn(\"amixer set Master playback toggle\", false )\n                                       vicious.force({ volumewidget })\n                                     end),\n    awful.key({ altkey, \"Control\" }, \"m\", function () \n                                              awful.util.spawn(\"amixer set Master playback 100%\", false )\n                                              vicious.force({ volumewidget })\n                                          end),\n\n    -- Music control\n    awful.key({ altkey, \"Control\" }, \"Up\", function () \n                                              awful.util.spawn( \"mpc toggle\", false ) \n                                              vicious.force({ mpdwidget } )\n                                           end),\n    awful.key({ altkey, \"Control\" }, \"Down\", function () \n                                                awful.util.spawn( \"mpc stop\", false ) \n                                                vicious.force({ mpdwidget } )\n                                             end ),\n    awful.key({ altkey, \"Control\" }, \"Left\", function ()\n                                                awful.util.spawn( \"mpc prev\", false )\n                                                vicious.force({ mpdwidget } )\n                                             end ),\n    awful.key({ altkey, \"Control\" }, \"Right\", function () \n                                                awful.util.spawn( \"mpc next\", false )\n                                                vicious.force({ mpdwidget } )\n                                              end ),\n\n    -- Copy to clipboard\n    awful.key({ modkey,        }, \"c\",      function () os.execute(\"xsel -p -o | xsel -i -b\") end),\n\n    -- User programs\n    awful.key({ modkey,        }, \"q\",      function () awful.util.spawn( \"dwb\", false ) end),\n    awful.key({ modkey,        }, \"a\",      function () awful.util.spawn( \"midori\", false ) end),\n    awful.key({ modkey,        }, \"s\",      function () awful.util.spawn(gui_editor) end),\n    awful.key({ modkey, 	     }, \"t\", 	    function () awful.util.spawn( \"thunderbird\", false ) end),\n    awful.key({ modkey,        }, \"d\", 	    function () awful.util.spawn( \"spacefm\", false ) end),\n    \n    -- Prompt\n    awful.key({ modkey }, \"r\", function () mypromptbox[mouse.screen]:run() end),\n\n    awful.key({ modkey }, \"x\",\n              function ()\n                  awful.prompt.run({ prompt = \"Run Lua code: \" },\n                  mypromptbox[mouse.screen].widget,\n                  awful.util.eval, nil,\n                  awful.util.getdir(\"cache\") .. \"/history_eval\")\n              end)\n)\n\nclientkeys = awful.util.table.join(\n    awful.key({ modkey,           }, \"f\",      function (c) c.fullscreen = not c.fullscreen  end),\n    awful.key({ modkey, \"Shift\"   }, \"c\",      function (c) c:kill()                         end),\n    awful.key({ modkey, \"Control\" }, \"space\",  awful.client.floating.toggle                     ),\n    awful.key({ modkey, \"Control\" }, \"Return\", function (c) c:swap(awful.client.getmaster()) end),\n    awful.key({ modkey,           }, \"o\",      awful.client.movetoscreen                        ),\n    awful.key({ modkey,           }, \"t\",      function (c) c.ontop = not c.ontop            end),\n    awful.key({ modkey,           }, \"n\",\n        function (c)\n            -- The client currently has the input focus, so it cannot be\n            -- minimized, since minimized clients can't have the focus.\n            c.minimized = true\n        end),\n    awful.key({ modkey,           }, \"m\",\n        function (c)\n            c.maximized_horizontal = not c.maximized_horizontal\n            c.maximized_vertical   = not c.maximized_vertical\n        end)\n)\n\n-- Compute the maximum number of digit we need, limited to 9\nkeynumber = 0\nfor s = 1, screen.count() do\n   keynumber = math.min(9, math.max(#tags[s], keynumber));\nend\n\n-- Bind all key numbers to tags.\n-- Be careful: we use keycodes to make it works on any keyboard layout.\n-- This should map on the top row of your keyboard, usually 1 to 9.\nfor i = 1, keynumber do\n    globalkeys = awful.util.table.join(globalkeys,\n        awful.key({ modkey }, \"#\" .. i + 9,\n                  function ()\n                        screen = mouse.screen\n                        if tags[screen][i] then\n                            awful.tag.viewonly(tags[screen][i])\n                        end\n                  end),\n        awful.key({ modkey, \"Control\" }, \"#\" .. i + 9,\n                  function ()\n                      screen = mouse.screen\n                      if tags[screen][i] then\n                          awful.tag.viewtoggle(tags[screen][i])\n                      end\n                  end),\n        awful.key({ modkey, \"Shift\" }, \"#\" .. i + 9,\n                  function ()\n                      if client.focus and tags[client.focus.screen][i] then\n                          awful.client.movetotag(tags[client.focus.screen][i])\n                      end\n                  end),\n        awful.key({ modkey, \"Control\", \"Shift\" }, \"#\" .. i + 9,\n                  function ()\n                      if client.focus and tags[client.focus.screen][i] then\n                          awful.client.toggletag(tags[client.focus.screen][i])\n                      end\n                  end))\nend\n\nclientbuttons = awful.util.table.join(\n    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),\n    awful.button({ modkey }, 1, awful.mouse.client.move),\n    awful.button({ modkey }, 3, awful.mouse.client.resize))\n\n-- Set keys\nroot.keys(globalkeys)\n\n-- }}}\n\n-- {{{ Rules\n\nawful.rules.rules = {\n     -- All clients will match this rule.\n     { rule = { },\n       properties = { border_width = beautiful.border_width,\n                      border_color = beautiful.border_normal,\n                      focus = true,\n                      keys = clientkeys,\n                      buttons = clientbuttons,\n	                  size_hints_honor = false\n                     }\n    },\n   \n    { rule = { class = \"MPlayer\" },\n      properties = { floating = true } },\n\n    { rule = { class = \"Dwb\" },\n          properties = { tag = tags[1][1],\n          			     maximized_vertical=true,\n          			     maximized_horizontal=true } },\n\n    { rule = { class = \"Midori\" },\n          properties = { tag = tags[1][1],\n          			     maximized_vertical=true,\n          			     maximized_horizontal=true } },\n\n    { rule = { class = \"Geany\" },\n          properties = { tag = tags[1][2] } },\n\n	  { rule = { class = \"Zathura\" },\n     	  properties = { tag = tags[1][3] } },\n\n    { rule = { class = \"Thunderbird\" },\n          properties = { tag = tags[1][3] } },\n\n    { rule = { class = \"Dia\" },\n          properties = { tag = tags[1][4], \n          floating = true } },\n\n    { rule = { class = \"Gimp\" },\n          properties = { tag = tags[1][4],\n          floating = true } },\n\n    { rule = { class = \"Inkscape\" },\n          properties = { tag = tags[1][4],\n          floating = true } },\n\n    { rule = { class = \"Transmission-gtk\" },\n          properties = { tag = tags[1][5] } },\n\n    { rule = { class = \"Torrent-search\" },\n          properties = { tag = tags[1][5] } },\n}\n\n-- }}}\n\n-- {{{ Signals\n\n-- Signal function to execute when a new client appears.\nclient.connect_signal(\"manage\", function (c, startup)\n    -- Enable sloppy focus\n    c:connect_signal(\"mouse::enter\", function(c)\n        if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier\n            and awful.client.focus.filter(c) then\n            client.focus = c\n        end\n    end)\n\n    if not startup then\n        -- Set the windows at the slave,\n        -- i.e. put it at the end of others instead of setting it master.\n        -- awful.client.setslave(c)\n\n        -- Put windows in a smart way, only if they does not set an initial position.\n        if not c.size_hints.user_position and not c.size_hints.program_position then\n            awful.placement.no_overlap(c)\n            awful.placement.no_offscreen(c)\n        end\n    end\n\n    local titlebars_enabled = false\n    if titlebars_enabled and (c.type == \"normal\" or c.type == \"dialog\") then\n        -- Widgets that are aligned to the left\n        local left_layout = wibox.layout.fixed.horizontal()\n        left_layout:add(awful.titlebar.widget.iconwidget(c))\n\n        -- Widgets that are aligned to the right\n        local right_layout = wibox.layout.fixed.horizontal()\n        right_layout:add(awful.titlebar.widget.floatingbutton(c))\n        right_layout:add(awful.titlebar.widget.maximizedbutton(c))\n        right_layout:add(awful.titlebar.widget.stickybutton(c))\n        right_layout:add(awful.titlebar.widget.ontopbutton(c))\n        right_layout:add(awful.titlebar.widget.closebutton(c))\n        right_layout:add(awful.titlebar.widget.closebutton(c))\n\n        -- The title goes in the middle\n        local title = awful.titlebar.widget.titlewidget(c)\n        title:buttons(awful.util.table.join(\n                awful.button({ }, 1, function()\n                    client.focus = c\n                    c:raise()\n                    awful.mouse.client.move(c)\n                end),\n                awful.button({ }, 3, function()\n                    client.focus = c\n                    c:raise()\n                    awful.mouse.client.resize(c)\n                end)\n                ))\n\n        -- Now bring it all together\n        local layout = wibox.layout.align.horizontal()\n        layout:set_left(left_layout)\n        layout:set_right(right_layout)\n        layout:set_middle(title)\n\n        awful.titlebar(c):set_widget(layout)\n    end\nend)\n\nclient.connect_signal(\"focus\", function(c) c.border_color = beautiful.border_focus end)\nclient.connect_signal(\"unfocus\", function(c) c.border_color = beautiful.border_normal end)\n\n-- }}}\n",
			"file": "rc.lua",
			"file_size": 36594,
			"file_write_time": 130192633575185101,
			"settings":
			{
				"buffer_size": 36587,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "--[[                                     ]]--\n--                                         -\n--    Blackburn Awesome WM 3.5.+ config    --\n--        github.com/copycat-killer        --\n--                                         -\n--[[                                     ]]--\n\n\n-- Required Libraries\n\nlocal gears           = require(\"gears\")\nlocal awful           = require(\"awful\")\nawful.rules           = require(\"awful.rules\")\nawful.autofocus       = require(\"awful.autofocus\")\nlocal wibox           = require(\"wibox\")\nlocal beautiful       = require(\"beautiful\")\nlocal naughty         = require(\"naughty\")\nlocal vicious         = require(\"vicious\")\nlocal scratch         = require(\"scratch\")\nlocal yawn            = require(\"yawn\")\n\n-- Run once function\n\nfunction run_once(cmd)\n  findme = cmd\n  firstspace = cmd:find(\" \")\n  if firstspace then\n     findme = cmd:sub(0, firstspace-1)\n  end\n  awful.util.spawn_with_shell(\"pgrep -u $USER -x \" .. findme .. \" > /dev/null || (\" .. cmd .. \")\")\nend\n\n-- autostart applications\nrun_once(\"urxvtd\")\nrun_once(\"unclutter -idle 10\")\nrun_once(\"compton\")\n\n\n-- Localization\n\nos.setlocale(os.getenv(\"LANG\"))\n\n\n-- Error Handling\n\n-- Check if awesome encountered an error during startup and fell back to\n-- another config (This code will only ever execute for the fallback config)\nif awesome.startup_errors then\n    naughty.notify({ preset = naughty.config.presets.critical,\n                     title = \"Oops, there were errors during startup!\",\n                     text = awesome.startup_errors })\nend\n\n-- Handle runtime errors after startup\ndo\n    local in_error = false\n    awesome.connect_signal(\"debug::error\", function (err)\n        -- Make sure we don't go into an endless error loop\n        if in_error then return end\n        in_error = true\n\n        naughty.notify({ preset = naughty.config.presets.critical,\n                         title = \"Oops, an error happened!\",\n                         text = err })\n        local in_error = false\n    end)\nend\n\n\n-- Global variables\n\nhome = os.getenv(\"HOME\")\nconfdir = home .. \"/.config/awesome\"\nscriptdir = confdir .. \"/scripts/\"\nthemes = confdir .. \"/themes\"\nactive_theme = themes .. \"/blackburn\"\nlanguage = string.gsub(os.getenv(\"LANG\"), \".utf8\", \"\")\n\nbeautiful.init(active_theme .. \"/theme.lua\")\n\nterminal = \"urxvtc\"\neditor = os.getenv(\"EDITOR\")\neditor_cmd = terminal .. \" -e \" .. editor\ngui_editor = \"gvim\"\nbrowser = \"dwb\"\nmail = terminal .. \" -e mutt \"\nwifi = terminal .. \" -e sudo wifi-menu \"\nmusicplr = terminal .. \" -g 130x34-320+16 -e ncmpcpp \"\n\nmodkey = \"Mod4\"\naltkey = \"Mod1\"\n\nlayouts =\n{\n    awful.layout.suit.floating,             -- 1\n    awful.layout.suit.tile,                 -- 2\n    awful.layout.suit.fair,                 -- 3\n    awful.layout.suit.tile.left,            -- 4\n    awful.layout.suit.tile.top,             -- 5\n}\n\n\n-- Wallpaper\n\nif beautiful.wallpaper then\n    for s = 1, screen.count() do\n        gears.wallpaper.maximized(beautiful.wallpaper, s, true)\n    end\nend\n\n-- Tags\ntyrannical.tags = {\n    {\n        name        = \"Term\",                 -- Call the tag \"Term\"\n        init        = true,                   -- Load the tag on startup\n        exclusive   = true,                   -- Refuse any other type of clients (by classes)\n        screen      = {1,2},                  -- Create this tag on screen 1 and screen 2\n        layout      = awful.layout.suit.tile, -- Use the tile layout\n        class       = { --Accept the following classes, refuse everything else (because of \"exclusive=true\")\n            \"xterm\" , \"urxvt\" , \"aterm\",\"URxvt\",\"XTerm\",\"konsole\",\"terminator\",\"gnome-terminal\"\n        }\n    } ,\n    {\n        name        = \"Internet\",\n        init        = true,\n        exclusive   = true,\n      --icon        = \"~net.png\",                 -- Use this icon for the tag (uncomment with a real path)\n        screen      = screen.count()>1 and 2 or 1,-- Setup on screen 2 if there is more than 1 screen, else on screen 1\n        layout      = awful.layout.suit.max,      -- Use the max layout\n        class = {\n            \"Opera\"         , \"Firefox\"        , \"Rekonq\"    , \"Dillo\"        , \"Arora\",\n            \"Chromium\"      , \"nightly\"        , \"minefield\"     }\n    } ,\n    {\n        name = \"Files\",\n        init        = true,\n        exclusive   = true,\n        screen      = 1,\n        layout      = awful.layout.suit.tile,\n        exec_once   = {\"dolphin\"}, --When the tag is accessed for the first time, execute this command\n        class  = {\n            \"Thunar\", \"Konqueror\", \"Dolphin\", \"ark\", \"Nautilus\",\"emelfm\"\n        }\n    } ,\n    {\n        name = \"Develop\",\n        init        = true,\n        exclusive   = true,\n        screen      = 1,\n        clone_on    = 2, -- Create a single instance of this tag on screen 1, but also show it on screen 2\n                         -- The tag can be used on both screen, but only one at once\n        layout      = awful.layout.suit.max                          ,\n        class ={ \n            \"Kate\", \"KDevelop\", \"Codeblocks\", \"Code::Blocks\" , \"DDD\", \"kate4\"}\n    } ,\n    {\n        name        = \"Doc\",\n        init        = false, -- This tag wont be created at startup, but will be when one of the\n                             -- client in the \"class\" section will start. It will be created on\n                             -- the client startup screen\n        exclusive   = true,\n        layout      = awful.layout.suit.max,\n        class       = {\n            \"Assistant\"     , \"Okular\"         , \"Evince\"    , \"EPDFviewer\"   , \"xpdf\",\n            \"Xpdf\"          ,                                        }\n    } ,\n}\n\n-- Ignore the tag \"exclusive\" property for the following clients (matched by classes)\ntyrannical.properties.intrusive = {\n    \"ksnapshot\"     , \"pinentry\"       , \"gtksu\"     , \"kcalc\"        , \"xcalc\"               ,\n    \"feh\"           , \"Gradient editor\", \"About KDE\" , \"Paste Special\", \"Background color\"    ,\n    \"kcolorchooser\" , \"plasmoidviewer\" , \"Xephyr\"    , \"kruler\"       , \"plasmaengineexplorer\",\n}\n\n-- Ignore the tiled layout for the matching clients\ntyrannical.properties.floating = {\n    \"MPlayer\"      , \"pinentry\"        , \"ksnapshot\"  , \"pinentry\"     , \"gtksu\"          ,\n    \"xine\"         , \"feh\"             , \"kmix\"       , \"kcalc\"        , \"xcalc\"          ,\n    \"yakuake\"      , \"Select Color$\"   , \"kruler\"     , \"kcolorchooser\", \"Paste Special\"  ,\n    \"New Form\"     , \"Insert Picture\"  , \"kcharselect\", \"mythfrontend\" , \"plasmoidviewer\" \n}\n\n-- Make the matching clients (by classes) on top of the default layout\ntyrannical.properties.ontop = {\n    \"Xephyr\"       , \"ksnapshot\"       , \"kruler\"\n}\n\n-- Force the matching clients (by classes) to be centered on the screen on init\ntyrannical.properties.centered = {\n    \"kcalc\"\n}\n\ntyrannical.settings.block_children_focus_stealing = true --Block popups ()\ntyrannical.settings.group_children = true --Force popups/dialogs to have the same tags as the parent client\n-- Menu\nmyaccessories = {\n   { \"archives\", \"7zFM\" },\n   { \"charmap\", \"gucharmap\" },\n   { \"gbdfed\", \"gbdfed\" },\n   { \"gimp\", \"gimp\" },\n   { \"text editor\", gui_editor },\n}\nmyinternet = {\n    { \"torrent\" , \"transmission-gtk\" },\n    { \"torrent search\" , \"torrent-search\" }\n}\nmyoffice = {\n    { \"writer\" , \"lowriter\" },\n    { \"impress\" , \"loimpress\" },\n}\nmysystem = {\n    { \"appearance\" , \"lxappearance\" },\n    { \"cleaning\" , \"bleachbit\" },\n    { \"powertop\" , terminal .. \" -e sudo powertop \" },\n}\nmymainmenu = awful.menu({ items = {\n				    { \"accessories\" , myaccessories },\n				    { \"internet\" , myinternet },\n				    { \"office\" , myoffice },\n				    { \"system\" , mysystem },\n            }\n            })\nmylauncher = awful.widget.launcher({ menu = mymainmenu })\n\n\n-- Wibox\n\n-- Colours\ncoldef  = \"</span>\"\nwhite  = \"<span color='#d7d7d7'>\"\ngray = \"<span color='#9e9c9a'>\"\n\n-- Textclock widget\nmytextclock = awful.widget.textclock(white .. \"%H:%M\"  .. coldef)\n\n-- attached calendar\nlocal os = os\nlocal string = string\nlocal table = table\nlocal util = awful.util\n\nchar_width = nil\ntext_color = theme.fg_normal or \"#FFFFFF\"\ntoday_color = theme.taglist_fg_focus or \"#FF7100\"\ncalendar_width = 21\n\nlocal calendar = nil\nlocal offset = 0\n\nlocal data = nil\n\nlocal function pop_spaces(s1, s2, maxsize)\n   local sps = \"\"\n   for i = 1, maxsize - string.len(s1) - string.len(s2) do\n      sps = sps .. \" \"\n   end\n   return s1 .. sps .. s2\nend\n\nlocal function create_calendar()\n   offset = offset or 0\n\n   local now = os.date(\"*t\")\n   local cal_month = now.month + offset\n   local cal_year = now.year\n   if cal_month > 12 then\n      cal_month = (cal_month % 12)\n      cal_year = cal_year + 1\n   elseif cal_month < 1 then\n      cal_month = (cal_month + 12)\n      cal_year = cal_year - 1\n   end\n\n   local last_day = os.date(\"%d\", os.time({ day = 1, year = cal_year,\n                                            month = cal_month + 1}) - 86400)\n\n   local first_day = os.time({ day = 1, month = cal_month, year = cal_year})\n   local first_day_in_week = os.date(\"%w\", first_day)\n\n   local result = \"do lu ma me gi ve sa\\n\" -- days of the week\n\n   -- Italian localization\n   -- can be a stub for your own localization\n   if language:find(\"it_IT\") == nil\n   then\n       result = \"su mo tu we th fr sa\\n\"\n   else\n       result = \"do lu ma me gi ve sa\\n\"\n   end\n\n   for i = 1, first_day_in_week do\n      result = result .. \"   \"\n   end\n\n   local this_month = false\n   for day = 1, last_day do\n      local last_in_week = (day + first_day_in_week) % 7 == 0\n      local day_str = pop_spaces(\"\", day, 2) .. (last_in_week and \"\" or \" \")\n      if cal_month == now.month and cal_year == now.year and day == now.day then\n         this_month = true\n         result = result ..\n            string.format('<span weight=\"bold\" foreground = \"%s\">%s</span>',\n                          today_color, day_str)\n      else\n         result = result .. day_str\n      end\n      if last_in_week and day ~= last_day then\n         result = result .. \"\\n\"\n      end\n   end\n\n   local header\n   if this_month then\n      header = os.date(\"%a, %d %b %Y\")\n   else\n      header = os.date(\"%B %Y\", first_day)\n   end\n   return header, string.format('<span font=\"%s\" foreground=\"%s\">%s</span>',\n                                theme.font, text_color, result)\nend\n\nlocal function calculate_char_width()\n   return beautiful.get_font_height(theme.font) * 0.555\nend\n\nfunction remove_calendar()\n   if calendar ~= nil then\n      naughty.destroy(calendar)\n      calendar = nil\n      offset = 0\n   end\nend\n\nfunction add_calendar(inc_offset)\n   inc_offset = inc_offset or 0\n\n   local save_offset = offset\n   remove_calendar()\n   offset = save_offset + inc_offset\n\n   local char_width = char_width or calculate_char_width()\n   local header, cal_text = create_calendar()\n   calendar = naughty.notify({ title = header,\n                               text = cal_text,\n                               timeout = 0, hover_timeout = 0.5,\n                               bg = \"#060606\"\n                            })\nend\n\nfunction show_calendar(t_out)\n   remove_calendar()\n   local char_width = char_width or calculate_char_width()\n   local header, cal_text = create_calendar()\n   calendar = naughty.notify({ title = header,\n                               text = cal_text,\n                               timeout = t_out,\n                               bg = \"#060606\"\n                            })\nend\n\nmytextclock:connect_signal(\"mouse::enter\", function() add_calendar(0) end)\nmytextclock:connect_signal(\"mouse::leave\", remove_calendar)\nmytextclock:buttons(util.table.join( awful.button({ }, 1, function() add_calendar(-1) end),\n                                     awful.button({ }, 3, function() add_calendar(1) end)))\n\n-- GMail widget\nmygmail = wibox.widget.textbox()\ngmail_t = awful.tooltip({ objects = { mygmail },})\nnotify_shown = false\nmailcount = 0\nvicious.register(mygmail, vicious.widgets.gmail,\n function (widget, args)\n  gmail_t:set_text(args[\"{subject}\"])\n  gmail_t:add_to_object(mygmail)\n  notify_title = \"\"\n  notify_text = \"\"\n  mailcount = args[\"{count}\"]\n  if (args[\"{count}\"] > 0 ) then\n    if (notify_shown == false) then\n      -- Italian localization\n      -- can be a stub for your own localization\n      if (args[\"{count}\"] == 1) then\n          if language:find(\"it_IT\") ~= nil\n          then\n              notify_title = \"Hai un nuovo messaggio\"\n          else\n              notify_title = \"You got a new mail\"\n          end\n          notify_text = '\"' .. args[\"{subject}\"] .. '\"'\n      else\n          if language:find(\"it_IT\") ~= nil\n          then\n                notify_title = \"Hai \" .. args[\"{count}\"] .. \" nuovi messaggi\"\n                notify_text = 'Ultimo: \"' .. args[\"{subject}\"] .. '\"'\n          else\n                notify_title = \"You got \" .. args[\"{count}\"] .. \" new mails\"\n                notify_text = 'Last one: \"' .. args[\"{subject}\"] .. '\"'\n          end\n      end\n      naughty.notify({\n          title = notify_title,\n          text = notify_text,\n          timeout = 7,\n          position = \"top_left\",\n          icon = beautiful.widget_mail_notify,\n          fg = beautiful.taglist_fg_focus,\n          bg = \"#060606\"\n      })\n      notify_shown = true\n    end\n    if yawn.icon == yawn.sky_na then return gray .. \" Mail \" .. coldef .. white .. args[\"{count}\"]  .. \" \" .. coldef\n    else return gray .. \" Mail \" .. coldef .. white .. args[\"{count}\"] .. coldef .. \" <span font='Tamsyn 5'> </span><span font='Tamsyn 3'> </span>\"\n    end\n  else\n    notify_shown = false\n    return ''\n  end\nend, 60)\nmygmail:buttons(awful.util.table.join(awful.button({ }, 1, function () awful.util.spawn(mail, false) end)))\n\n-- Mpd widget\nmpdwidget = wibox.widget.textbox()\nmpdwidget:buttons(awful.util.table.join(awful.button({ }, 1, function () awful.util.spawn_with_shell(musicplr) end)))\ncurr_track = nil\nvicious.register(mpdwidget, vicious.widgets.mpd,\nfunction(widget, args)\n	if args[\"{state}\"] == \"Play\" then\n    if args[\"{Title}\"] ~= curr_track\n     then\n        curr_track = args[\"{Title}\"]\n        os.execute(scriptdir .. \"mpdinfo\")\n        old_id = naughty.notify({\n            title = \"Now playing\",\n            text = args[\"{Artist}\"] .. \" (\" .. args[\"{Album}\"] .. \")\\n\" .. args[\"{Title}\"],\n            icon = \"/tmp/mpdnotify_cover.png\",\n            bg = \"#060606\",\n            timeout = 5,\n            replaces_id = old_id\n        }).id\n    end\n   if yawn.icon == yawn.sky_na then return gray .. args[\"{Artist}\"] .. coldef .. white .. \" \" .. args[\"{Title}\"] .. \" \" .. coldef\n    elseif mailcount == 0 then return gray .. args[\"{Artist}\"] .. coldef .. white .. \" \" .. args[\"{Title}\"] .. \"<span font='Tamsyn 8'>  <span font ='Tamsyn 2'> </span></span>\" .. coldef\n    else return gray .. args[\"{Artist}\"] .. coldef .. white .. \" \" .. args[\"{Title}\"] .. coldef .. \"<span font='Tamsyn 8'> <span font='Tamsyn 2'> </span></span>\" \n    end\n	 elseif args[\"{state}\"] == \"Pause\" then\n    if mailcount == 0 then return gray .. \"mpd \" .. coldef .. white .. \"in pausa<span font='Tamsyn 6'> </span> \" .. coldef\n    else return gray .. \"mpd \" .. coldef .. white .. \"in pausa \" .. coldef\n    end\n	else\n    curr_track = nil\n		return ''\n	end\nend, 1)\n\n-- /home fs widget\nfshwidget = wibox.widget.textbox()\ntoo_much = false\nvicious.register(fshwidget, vicious.widgets.fs,\nfunction (widget, args)\n  if ( args[\"{/home used_p}\"] >= 90 ) then\n      if ( args[\"{/home used_p}\"] >= 99 and too_much == false ) then\n        naughty.notify({ title = \"Attenzione\", text = \"Partizione /home esaurita!\\nFa' un po' di spazio.\",\n        timeout = 7,\n        position = \"top_right\",\n        fg = beautiful.fg_urgent,\n        bg = beautiful.bg_urgent })\n        too_much = true\n      end\n      return gray .. \" Hdd \" .. coldef .. white .. args[\"{/home used_p}\"] .. coldef .. \" \"\n  else\n    return \"\"\n  end\nend, 600)\n\n-- hhd status notification\nlocal infos = nil\n\nfunction remove_info()\n    if infos ~= nil then\n        naughty.destroy(infos)\n        infos = nil\n    end\nend\n\nfunction show_info(t_out)\n    remove_info()\n    local capi = {\n		mouse = mouse,\n		screen = screen\n	  }\n    local hdd = awful.util.pread(scriptdir .. \"dfs\")\n    hdd = string.gsub(hdd, \"          ^%s*(.-)%s*$\", \"%1\")\n\n    -- Italian localization\n    -- can be a stub for your own localization\n    if language:find(\"it_IT\") ~= nil\n    then\n        hdd = string.gsub(hdd, \"Used \", \"Usato\")\n        hdd = string.gsub(hdd, \"Free  \", \"Libero\")\n        hdd = string.gsub(hdd, \"Total \", \"Totale\")\n    end\n\n    infos = naughty.notify({\n        text = hdd,\n      	timeout = t_out,\n        position = \"top_right\",\n        margin = 10,\n        height = 210,\n        width = 680,\n        bg = \"#060606\",\n		    screen = capi.mouse.screen\n    })\nend\n\nfshwidget:connect_signal('mouse::enter', function () show_info(0) end)\nfshwidget:connect_signal('mouse::leave', function () remove_info() end)\n\n-- Battery widget\nbatwidget = wibox.widget.textbox()\nfunction batstate()\n\n  local file = io.open(\"/sys/class/power_supply/BAT0/status\", \"r\")\n\n  if (file == nil) then\n    return \"Cable plugged\"\n  end\n\n  local batstate = file:read(\"*line\")\n  file:close()\n\n  if (batstate == 'Discharging' or batstate == 'Charging') then\n    return batstate\n  else\n    return \"Fully charged\"\n  end\nend\nvicious.register(batwidget, vicious.widgets.bat,\nfunction (widget, args)\n  -- plugged\n  if (batstate() == 'Cable plugged' or batstate() == 'Unknown') then\n    return ''\n    -- critical\n  elseif (args[2] <= 5 and batstate() == 'Discharging') then\n    naughty.notify{\n      text = \"sto per spegnermi...\",\n      title = \"Carica quasi esaurita!\",\n      position = \"top_right\",\n      timeout = 0,\n      fg=\"#000000\",\n      bg=\"#ffffff\",\n      screen = 1,\n      ontop = true,\n    }\n    -- low\n  elseif (args[2] <= 10 and batstate() == 'Discharging') then\n    naughty.notify({\n      text = \"attacca il cavo!\",\n      title = \"Carica bassa\",\n      position = \"top_right\",\n      timeout = 0,\n      fg=\"#ffffff\",\n      bg=\"#262729\",\n      screen = 1,\n      ontop = true,\n    })\n  end\n  return gray .. \"Bat \" .. coldef .. white .. args[2] .. \" \" .. coldef\nend, 1, 'BAT0')\n\n-- Volume widget\nvolumewidget = wibox.widget.textbox()\nvicious.register(volumewidget, vicious.widgets.volume,\nfunction (widget, args)\n  if (args[2] ~= \"♩\" ) then\n     return gray .. \"Vol \" .. coldef .. white .. args[1] .. \" \" .. coldef\n  else\n     return gray .. \"Vol \" .. coldef .. white .. \"mute \" .. coldef\n  end\nend, 1, \"Master\")\n\n-- Net checker widget\nno_net_shown = true\nnetwidget = wibox.widget.textbox()\nvicious.register(netwidget, vicious.widgets.net,\nfunction (widget, args)\n    if args[\"{wlan0 carrier}\"] == 0 then\n       if no_net_shown == true then\n         naughty.notify({ title = \"wlan0\", text = \"No carrier\",\n         timeout = 7,\n         position = \"top_left\",\n         icon = beautiful.widget_no_net_notify,\n         fg = \"#ff5e5e\",\n         bg = \"#060606\" })\n         no_net_shown = false\n       end\n       return gray .. \" Net \" .. coldef .. \"<span color='#e54c62'>Off \" .. coldef\n    else\n       no_net_shown = true\n       return ''\n    end\nend, 10)\nnetwidget:buttons(awful.util.table.join(awful.button({ }, 1, function () awful.util.spawn_with_shell(wifi) end)))\n\n-- Weather widget\nyawn.register(123456) -- https//github.com/copycat-killer/yawn\n\n-- Separators\nspr = wibox.widget.textbox(' ')\nfirst = wibox.widget.textbox('<span font=\"Tamsyn 4\"> </span>')\narrl_pre = wibox.widget.imagebox()\narrl_pre:set_image(beautiful.arrl_lr_pre)\narrl_post = wibox.widget.imagebox()\narrl_post:set_image(beautiful.arrl_lr_post)\n\n\n-- Layout\n\n-- Create a wibox for each screen and add it\nmywibox = {}\nmypromptbox = {}\nmylayoutbox = {}\nmytaglist = {}\nmytaglist.buttons = awful.util.table.join(\n                    awful.button({ }, 1, awful.tag.viewonly),\n                    awful.button({ modkey }, 1, awful.client.movetotag),\n                    awful.button({ }, 3, awful.tag.viewtoggle),\n                    awful.button({ modkey }, 3, awful.client.toggletag),\n                    awful.button({ }, 4, function(t) awful.tag.viewnext(awful.tag.getscreen(t)) end),\n                    awful.button({ }, 5, function(t) awful.tag.viewprev(awful.tag.getscreen(t)) end)\n                    )\nmytasklist = {}\nmytasklist.buttons = awful.util.table.join(\n                     awful.button({ }, 1, function (c)\n                                              if c == client.focus then\n                                                  c.minimized = true\n                                              else\n                                                  -- Without this, the following\n                                                  -- :isvisible() makes no sense\n                                                  c.minimized = false\n                                                  if not c:isvisible() then\n                                                      awful.tag.viewonly(c:tags()[1])\n                                                  end\n                                                  -- This will also un-minimize\n                                                  -- the client, if needed\n                                                  client.focus = c\n                                                  c:raise()\n                                              end\n                                          end),\n                     awful.button({ }, 3, function ()\n                                              if instance then\n                                                  instance:hide()\n                                                  instance = nil\n                                              else\n                                                  instance = awful.menu.clients({ width=250 })\n                                              end\n                                          end),\n                     awful.button({ }, 4, function ()\n                                              awful.client.focus.byidx(1)\n                                              if client.focus then client.focus:raise() end\n                                          end),\n                     awful.button({ }, 5, function ()\n                                              awful.client.focus.byidx(-1)\n                                              if client.focus then client.focus:raise() end\n                                          end))\n\nfor s = 1, screen.count() do\n    -- Create a promptbox for each screen\n    mypromptbox[s] = awful.widget.prompt()\n    -- Create an imagebox widget which will contains an icon indicating which layout we're using.\n    -- We need one layoutbox per screen.\n    mylayoutbox[s] = awful.widget.layoutbox(s)\n    mylayoutbox[s]:buttons(awful.util.table.join(\n                           awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),\n                           awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),\n                           awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),\n                           awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))\n    -- Create a taglist widget\n    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.filter.all, mytaglist.buttons)\n\n    -- Create a tasklist widget\n    mytasklist[s] = awful.widget.tasklist(s, awful.widget.tasklist.filter.currenttags, mytasklist.buttons)\n    \n    -- Create the wibox\n    mywibox[s] = awful.wibox({ position = \"top\", screen = s, height = 18 })\n\n    -- Widgets that are aligned to the upper left\n    local left_layout = wibox.layout.fixed.horizontal()\n    left_layout:add(first)\n    left_layout:add(mytaglist[s])\n    left_layout:add(arrl_pre)\n    left_layout:add(mylayoutbox[s])\n    left_layout:add(arrl_post)\n    left_layout:add(mypromptbox[s])\n    left_layout:add(first)\n\n    -- Widgets that are aligned to the upper right\n    local right_layout = wibox.layout.fixed.horizontal()\n    if s == 1 then right_layout:add(wibox.widget.systray()) end\n    right_layout:add(first)\n    right_layout:add(mpdwidget)\n    right_layout:add(mygmail)\n    right_layout:add(yawn.icon)\n    right_layout:add(yawn.widget)\n    right_layout:add(fshwidget)\n    right_layout:add(batwidget)\n    right_layout:add(netwidget)\n    right_layout:add(spr)\n    right_layout:add(volumewidget)\n    right_layout:add(spr)\n    right_layout:add(mytextclock)\n    right_layout:add(spr)\n\n    -- Now bring it all together (with the tasklist in the middle)\n    local layout = wibox.layout.align.horizontal()\n    layout:set_left(left_layout)\n    layout:set_middle(mytasklist[s])\n    layout:set_right(right_layout)\n\n    mywibox[s]:set_widget(layout)\n\nend\n\n-- Mouse Bindings\n\nroot.buttons(awful.util.table.join(\n    awful.button({ }, 3, function () mymainmenu:toggle() end),\n    awful.button({ }, 4, awful.tag.viewnext),\n    awful.button({ }, 5, awful.tag.viewprev)\n))\n\n\n-- Key bindings\nglobalkeys = awful.util.table.join(\n\n    -- Capture a screenshot\n    awful.key({ altkey }, \"p\", function() awful.util.spawn(\"screenshot\",false) end),\n\n    -- Move clients\n    --awful.key({ altkey }, \"Next\",  function () awful.client.moveresize( 1,  1, -2, -2) end),\n    --awful.key({ altkey }, \"Prior\", function () awful.client.moveresize(-1, -1,  2,  2) end),\n    --awful.key({ altkey }, \"Down\",  function () awful.client.moveresize(  0,  1,   0,   0) end),\n    --awful.key({ altkey }, \"Up\",    function () awful.client.moveresize(  0, -1,   0,   0) end),\n    --awful.key({ altkey }, \"Left\",  function () awful.client.moveresize(-1,   0,   0,   0) end),\n    --awful.key({ altkey }, \"Right\", function () awful.client.moveresize( 1,   0,   0,   0) end),\n    awful.key({ modkey,           }, \"Left\",   awful.tag.viewprev       ),\n    awful.key({ modkey,           }, \"Right\",  awful.tag.viewnext       ),\n    awful.key({ modkey,           }, \"Escape\", awful.tag.history.restore),\n    awful.key({ modkey,           }, \"k\",\n        function ()\n            awful.client.focus.byidx( 1)\n            if client.focus then client.focus:raise() end\n        end),\n    awful.key({ modkey,           }, \"j\",\n        function ()\n            awful.client.focus.byidx(-1)\n            if client.focus then client.focus:raise() end\n        end),\n    awful.key({ modkey,           }, \"w\", function () mymainmenu:show({keygrabber=true}) end),\n\n    -- Show/Hide Wibox\n    awful.key({ modkey }, \"b\", function ()\n        mywibox[mouse.screen].visible = not mywibox[mouse.screen].visible\n    end),\n\n    -- Layout manipulation\n    awful.key({ modkey, \"Shift\"   }, \"j\", function () awful.client.swap.byidx(  1)    end),\n    awful.key({ modkey, \"Shift\"   }, \"k\", function () awful.client.swap.byidx( -1)    end),\n    awful.key({ modkey, \"Control\" }, \"j\", function () awful.screen.focus_relative( 1) end),\n    awful.key({ modkey, \"Control\" }, \"k\", function () awful.screen.focus_relative(-1) end),\n    awful.key({ modkey,           }, \"u\", awful.client.urgent.jumpto),\n    awful.key({ modkey,           }, \"Tab\",\n        function ()\n            awful.client.focus.history.previous()\n            if client.focus then\n                client.focus:raise()\n            end\n        end),\n\n    -- Standard program\n    awful.key({ modkey,           }, \"Return\", function () awful.util.spawn(terminal) end),\n    awful.key({ modkey, \"Control\" }, \"r\", awesome.restart),\n    awful.key({ modkey, \"Shift\"   }, \"q\", awesome.quit),\n    awful.key({ modkey,           }, \"l\",     function () awful.tag.incmwfact( 0.05)     end),\n    awful.key({ modkey,           }, \"h\",     function () awful.tag.incmwfact(-0.05)     end),\n    awful.key({ modkey, \"Shift\"   }, \"h\",     function () awful.tag.incnmaster( 1)       end),\n    awful.key({ modkey, \"Shift\"   }, \"l\",     function () awful.tag.incnmaster(-1)       end),\n    awful.key({ modkey, \"Control\" }, \"h\",     function () awful.tag.incncol( 1)          end),\n    awful.key({ modkey, \"Control\" }, \"l\",     function () awful.tag.incncol(-1)          end),\n    awful.key({ modkey,           }, \"space\", function () awful.layout.inc(layouts,  1)  end),\n    awful.key({ modkey, \"Shift\"   }, \"space\", function () awful.layout.inc(layouts, -1)  end),\n    awful.key({ modkey, \"Control\" }, \"n\", awful.client.restore),\n\n    -- Dropdown terminal\n    awful.key({ modkey,	          }, \"z\",     function () scratch.drop(terminal) end),\n\n    -- Widgets popups\n    awful.key({ altkey,           }, \"c\",     function () show_calendar(7) end),\n    awful.key({ altkey,           }, \"h\",     function ()\n                                                vicious.force({ fshwidget })\n                                                show_info(7)\n                                              end),\n    awful.key({ altkey,           }, \"w\",     function () yawn.show_weather(5) end),\n\n    -- Volume control\n    awful.key({ altkey }, \"Up\", function ()\n                                       awful.util.spawn(\"amixer set Master playback 1%+\", false )\n                                       vicious.force({ volumewidget })\n                                   end),\n    awful.key({ altkey }, \"Down\", function ()\n                                       awful.util.spawn(\"amixer set Master playback 1%-\", false )\n                                       vicious.force({ volumewidget })\n                                     end),\n    awful.key({ altkey }, \"m\", function ()\n                                       awful.util.spawn(\"amixer set Master playback toggle\", false )\n                                       vicious.force({ volumewidget })\n                                     end),\n    awful.key({ altkey, \"Control\" }, \"m\",\n                                  function ()\n                                      awful.util.spawn(\"amixer set Master playback 100%\", false )\n                                      vicious.force({ volumewidget })\n                                  end),\n\n    -- Music control\n    awful.key({ altkey, \"Control\" }, \"Up\", function ()\n                                              awful.util.spawn( \"mpc toggle\", false )\n                                              vicious.force({ mpdwidget } )\n                                           end),\n    awful.key({ altkey, \"Control\" }, \"Down\", function ()\n                                                awful.util.spawn( \"mpc stop\", false )\n                                                vicious.force({ mpdwidget } )\n                                             end ),\n    awful.key({ altkey, \"Control\" }, \"Left\", function ()\n                                                awful.util.spawn( \"mpc prev\", false )\n                                                vicious.force({ mpdwidget } )\n                                             end ),\n    awful.key({ altkey, \"Control\" }, \"Right\", function ()\n                                                awful.util.spawn( \"mpc next\", false )\n                                                vicious.force({ mpdwidget } )\n                                              end ),\n\n    -- Copy to clipboard\n    awful.key({ modkey }, \"c\", function () os.execute(\"xsel -p -o | xsel -i -b\") end),\n\n    -- User programs\n    awful.key({ modkey }, \"q\", function () awful.util.spawn( \"dwb\", false ) end),\n    awful.key({ modkey }, \"s\", function () awful.util.spawn(gui_editor) end),\n\n    -- Prompt\n    awful.key({ modkey }, \"r\", function () mypromptbox[mouse.screen]:run() end),\n    awful.key({ modkey }, \"x\",\n              function ()\n                  awful.prompt.run({ prompt = \"Run Lua code: \" },\n                  mypromptbox[mouse.screen].widget,\n                  awful.util.eval, nil,\n                  awful.util.getdir(\"cache\") .. \"/history_eval\")\n              end)\n)\n\nclientkeys = awful.util.table.join(\n    awful.key({ modkey,           }, \"f\",      function (c) c.fullscreen = not c.fullscreen  end),\n    awful.key({ modkey, \"Shift\"   }, \"c\",      function (c) c:kill()                         end),\n    awful.key({ modkey, \"Control\" }, \"space\",  awful.client.floating.toggle                     ),\n    awful.key({ modkey, \"Control\" }, \"Return\", function (c) c:swap(awful.client.getmaster()) end),\n    awful.key({ modkey,           }, \"o\",      awful.client.movetoscreen                        ),\n    awful.key({ modkey,           }, \"t\",      function (c) c.ontop = not c.ontop            end),\n    awful.key({ modkey,           }, \"n\",\n        function (c)\n            -- The client currently has the input focus, so it cannot be\n            -- minimized, since minimized clients can't have the focus.\n            c.minimized = true\n        end),\n    awful.key({ modkey,           }, \"m\",\n        function (c)\n            c.maximized_horizontal = not c.maximized_horizontal\n            c.maximized_vertical   = not c.maximized_vertical\n        end)\n)\n\n\n-- Compute the maximum number of digit we need, limited to 9\n-- keynumber = 0\n-- for s = 1, screen.count() do\n--    keynumber = math.min(9, math.max(#tags[s], keynumber));\n-- end\n\n-- Bind all key numbers to tags.\n-- Be careful: we use keycodes to make it works on any keyboard layout.\n-- This should map on the top row of your keyboard, usually 1 to 9.\n-- for i = 1, keynumber do\n--     globalkeys = awful.util.table.join(globalkeys,\n--         awful.key({ modkey }, \"#\" .. i + 9,\n--                   function ()\n--                         screen = mouse.screen\n--                         if tags[screen][i] then\n--                             awful.tag.viewonly(tags[screen][i])\n--                         end\n--                   end),\n--         awful.key({ modkey, \"Control\" }, \"#\" .. i + 9,\n--                   function ()\n--                       screen = mouse.screen\n--                       if tags[screen][i] then\n--                           awful.tag.viewtoggle(tags[screen][i])\n--                       end\n--                   end),\n--         awful.key({ modkey, \"Shift\" }, \"#\" .. i + 9,\n--                   function ()\n--                       if client.focus and tags[client.focus.screen][i] then\n--                           awful.client.movetotag(tags[client.focus.screen][i])\n--                       end\n--                   end),\n--         awful.key({ modkey, \"Control\", \"Shift\" }, \"#\" .. i + 9,\n--                   function ()\n--                       if client.focus and tags[client.focus.screen][i] then\n--                           awful.client.toggletag(tags[client.focus.screen][i])\n--                       end\n--                   end))\n-- end\n\nclientbuttons = awful.util.table.join(\n    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),\n    awful.button({ modkey }, 1, awful.mouse.client.move),\n    awful.button({ modkey }, 3, awful.mouse.client.resize))\n\n-- Set keys\nroot.keys(globalkeys)\n\n\n-- Rules\n\nawful.rules.rules = {\n     -- All clients will match this rule.\n     { rule = { },\n       properties = { border_width = beautiful.border_width,\n                      border_color = beautiful.border_normal,\n                      focus = awful.client.focus.filter,\n                      keys = clientkeys,\n                      buttons = clientbuttons,\n	                    size_hints_honor = false\n                     }\n    },\n\n    { rule = { class = \"URxvt\" },\n      properties = { opacity = 0.95 } }, \n\n    { rule = { class = \"MPlayer\" },\n      properties = { floating = true } },\n\n    { rule = { class = \"Dwb\" },\n          properties = { tag = tags[1][1] } },\n\n	  { rule = { class = \"Gimp\" },\n     	  properties = { tag = tags[1][4] } },\n\n    { rule = { class = \"Gimp\", role = \"gimp-image-window\" },\n          properties = { maximized_horizontal = true,\n                         maximized_vertical = true } },\n\n    { rule = { class = \"Transmission-gtk\" },\n          properties = { tag = tags[1][5] } },\n\n    { rule = { class = \"Torrent-search\" },\n          properties = { tag = tags[1][5] } },\n}\n\n\n-- Signals\n\n-- Signal function to execute when a new client appears.\nclient.connect_signal(\"manage\", function (c, startup)\n    -- Enable sloppy focus\n    c:connect_signal(\"mouse::enter\", function(c)\n        if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier\n            and awful.client.focus.filter(c) then\n            client.focus = c\n        end\n    end)\n\n    if not startup then\n        -- Set the windows at the slave,\n        -- i.e. put it at the end of others instead of setting it master.\n        -- awful.client.setslave(c)\n\n        -- Put windows in a smart way, only if they does not set an initial position.\n        if not c.size_hints.user_position and not c.size_hints.program_position then\n            awful.placement.no_overlap(c)\n            awful.placement.no_offscreen(c)\n        end\n    end\n\n    local titlebars_enabled = false\n    if titlebars_enabled and (c.type == \"normal\" or c.type == \"dialog\") then\n        -- buttons for the titlebar\n        local buttons = awful.util.table.join(\n                awful.button({ }, 1, function()\n                    client.focus = c\n                    c:raise()\n                    awful.mouse.client.move(c)\n                end),\n                awful.button({ }, 3, function()\n                    client.focus = c\n                    c:raise()\n                    awful.mouse.client.resize(c)\n                end)\n                )\n\n        -- Widgets that are aligned to the left\n        local left_layout = wibox.layout.fixed.horizontal()\n        left_layout:add(awful.titlebar.widget.iconwidget(c))\n        left_layout:buttons(buttons)\n\n        -- Widgets that are aligned to the right\n        local right_layout = wibox.layout.fixed.horizontal()\n        right_layout:add(awful.titlebar.widget.floatingbutton(c))\n        right_layout:add(awful.titlebar.widget.maximizedbutton(c))\n        right_layout:add(awful.titlebar.widget.stickybutton(c))\n        right_layout:add(awful.titlebar.widget.ontopbutton(c))\n        right_layout:add(awful.titlebar.widget.closebutton(c))\n\n        -- The title goes in the middle\n        local middle_layout = wibox.layout.flex.horizontal()\n        local title = awful.titlebar.widget.titlewidget(c)\n        title:set_align(\"center\")\n        middle_layout:add(title)\n        middle_layout:buttons(buttons)\n\n        -- Now bring it all together\n        local layout = wibox.layout.align.horizontal()\n        layout:set_left(left_layout)\n        layout:set_right(right_layout)\n        layout:set_middle(middle_layout)\n\n        awful.titlebar(c):set_widget(layout)\n    end\nend)\n\nclient.connect_signal(\"focus\", function(c) c.border_color = beautiful.border_focus end)\nclient.connect_signal(\"unfocus\", function(c) c.border_color = beautiful.border_normal end)\n",
			"settings":
			{
				"buffer_size": 38504,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/tad/.config/awesome_partially_done/rc.lua.new",
			"settings":
			{
				"buffer_size": 21964,
				"line_ending": "Unix"
			}
		},
		{
			"file": "rc.lua.blackburn",
			"settings":
			{
				"buffer_size": 34666,
				"line_ending": "Unix"
			}
		},
		{
			"file": "rc.lua.powerarrow-darker",
			"settings":
			{
				"buffer_size": 36563,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 372.0,
		"selected_items":
		[
			[
				"lua",
				"Set Syntax: Lua"
			],
			[
				"markdo",
				"Set Syntax: Markdown"
			],
			[
				"ruby",
				"Set Syntax: Ruby"
			],
			[
				"Package Control: i",
				"Package Control: Install Package"
			],
			[
				"json",
				"Set Syntax: JSON"
			],
			[
				"java",
				"Set Syntax: JavaScript"
			],
			[
				"prett",
				"Pretty JSON: Reformat (Pretty Print) JSON"
			],
			[
				"jso",
				"Set Syntax: JSON"
			],
			[
				"pretty",
				"Pretty JSON: Reformat (Pretty Print) JSON"
			],
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"form",
				"Format: Php"
			],
			[
				"Package Control: insta",
				"Package Control: Install Package"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"for",
				"Tag: Auto-Format Tags on Document"
			],
			[
				"Package Control: install",
				"Package Control: Install Package"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"Package Control: ",
				"Package Control: Enable Package"
			],
			[
				"html",
				"HTMLPrettify: Prettify"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/tad/code/consie_api/spec/controllers/consie/organizations_controller_spec.rb",
		"/home/tad/.config/awesome/delightful/awesome-3.4.3-delightful-sample-configuration.diff",
		"/home/tad/.config/awesome/delightful/awesome-3.4.3-delightful-sample-configuration.diff ",
		"/home/tad/.config/awesome/rc.lua.new",
		"/home/tad/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/tad/code/consie_api/Guardfile",
		"/home/tad/code/consie_api/.rspec",
		"/home/tad/code/consie_api/config/routes.rb",
		"/home/tad/code/concierge-api/spec/controllers/consie/events_controller_spec.rb",
		"/home/tad/code/concierge/app/models/organization_event_map.rb",
		"/home/tad/code/concierge/tmp/cache/assets/CAD/710/sprockets%2Fc03e6bd578aad553026cd90188194426",
		"/home/tad/code/concierge/app/controllers/concierge/events_controller.rb",
		"/home/tad/code/concierge/app/models/closed_organization.rb",
		"/home/tad/code/concierge/app/models/organization.rb",
		"/home/tad/code/concierge/spec/factories/organization.rb",
		"/home/tad/code/concierge/app/controllers/consie/application_controller.rb",
		"/home/tad/code/concierge/spec/controllers/consie/events_controller_spec.rb",
		"/home/tad/code/concierge/spec/controllers/consie/specials_controller_spec.rb",
		"/home/tad/code/concierge/app/controllers/consie/specials_controller.rb",
		"/home/tad/code/concierge/app/models/tag.rb",
		"/home/tad/code/concierge/spec/controllers/consie/organizations_controller_spec.rb",
		"/home/tad/code/concierge/app/controllers/consie/events_controller.rb",
		"/home/tad/code/concierge/app/models/event.rb",
		"/home/tad/code/concierge/spec/factories/event.rb",
		"/home/tad/code/concierge/spec/controllers/concierge/organizations_controller_spec.rb",
		"/home/tad/code/concierge/spec/api/organizations_spec.rb",
		"/home/tad/code/concierge/spec/api/events_spec.rb",
		"/home/tad/code/concierge/app/models/special.rb",
		"/home/tad/code/concierge/config/routes.rb",
		"/home/tad/code/concierge/app/models/special_recurs_saturday.rb",
		"/home/tad/code/concierge/spec/models/special_spec.rb",
		"/home/tad/code/concierge/spec/spec_helper.rb",
		"/home/tad/code/concierge/vendor/assets/javascripts/moment.min.js",
		"/home/tad/code/concierge/spec/javascripts/spec.js.coffee",
		"/home/tad/code/concierge/app/models/special_recurs_friday.rb",
		"/home/tad/code/concierge/app/models/place.rb",
		"/home/tad/code/concierge/app/models/menu_item.rb",
		"/home/tad/code/concierge/app/models/event_tag_map.rb",
		"/home/tad/code/concierge/app/models/featured_event.rb",
		"/home/tad/code/concierge/app/models/special_title.rb",
		"/home/tad/code/concierge/app/models/special_all_day.rb",
		"/home/tad/code/concierge/.rspec",
		"/home/tad/code/concierge/app/controllers/whmobile/application_controller.rb",
		"/home/tad/code/concierge/app/assets/javascripts/mobile/routers/app.js.coffee",
		"/home/tad/code/concierge/app/controllers/whatshappenin/application_controller.rb",
		"/home/tad/code/concierge/app/assets/javascripts/mobile/views/cards/todays-events.js.coffee",
		"/home/tad/code/concierge/app/assets/templates/mobile/cards/special-listing.jst.eco",
		"/home/tad/code/concierge/app/assets/javascripts/concierge-scripts/models/base/special.js.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/mobile/views/specials.js.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/mobile/views/panes/featured-events.js.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/common/views/_base.js.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/mobile/views/restaurant-specials-hub.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/mobile/views/main-menu.js.coffee",
		"/home/tad/.config/sublime-text-2/Packages/User/Preferences.sublime-settings",
		"/home/tad/code/concierge/app/controllers/whmobile/restaurants_controller.rb",
		"/home/tad/code/concierge/app/controllers/whatshappenin/events_controller.rb",
		"/home/tad/code/concierge/app/controllers/application_controller.rb",
		"/home/tad/code/concierge/app/assets/javascripts/mobile/views/panes/item-preview.js.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/mobile/views/card.js.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/mobile/views/mixins/specials-button.js.coffee",
		"/home/tad/code/concierge/app/assets/templates/mobile/cards/special-listing--none.jst.eco",
		"/home/tad/code/concierge/app/assets/javascripts/mobile/views/stack-items/card-container.js.coffee",
		"/home/tad/.config/awesome/rc.lua",
		"/home/tad/code/concierge/app/assets/javascripts/mobile/views/music/hub.js.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/mobile/views/cards/todays-specials.js.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/mobile/views/restaurants/hub.js.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/mobile/views/stack-item.js.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/mobile/views/restaurants/restaurant-specials.js.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/concierge-scripts/models/base/organization.js.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/mobile/routers/_base.js.coffee",
		"/home/tad/code/concierge/config/environment.rb",
		"/home/tad/code/concierge/config/environments/development.rb",
		"/home/tad/code/concierge/app/assets/javascripts/common/views/app.js.coffee",
		"/home/tad/code/concierge/app/controllers/concierge/file",
		"/home/tad/code/concierge notes",
		"/home/tad/code/concierge/app/assets/javascripts/common/views/region.js.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/mobile/views/region.js.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/mobile/views/app.js.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/mobile/views/restaurants/restaurant-profile.js.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/mobile/views/hub.js.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/mobile/views/profile.js.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/common/views/restaurant-item.js.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/mobile/views/region-no-ads.js.coffee",
		"/home/tad/scratch/routes.rb",
		"/home/tad/code/concierge/app/assets/javascripts/mobile/views/all-restaurant-specials.js.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/common/views/stack-items.js.coffee",
		"/home/tad/code/concierge/app/assets/templates/mobile/specials/item--no-image-show-restaurant.jst.eco",
		"/home/tad/code/concierge/app/assets/javascripts/concierge-scripts/collections/specials.js.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/concierge-scripts/collections/base.js.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/concierge-scripts/models/concierge/concierge_special.js.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/mobile/views/restaurants/menus/free-menu.js.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/common/views/tab.js.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/mobile/views/panes.js.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/common/views/pane.js.coffee",
		"/home/tad/code/concierge/app/assets/templates/mobile/food-and-drink/free-menu.jst.eco",
		"/home/tad/code/concierge/app/assets/templates/mobile/hubs/music/hub-items/music-hub/featured-events/featured-event.jst.eco",
		"/home/tad/code/concierge/app/assets/templates/mobile/hubs/food-and-drink/hub-items/food-and-drink/restaurant-item.jst.eco",
		"/home/tad/code/concierge/app/assets/templates/mobile/hubs/food-and-drink/event-button.jst.eco",
		"/home/tad/code/concierge/app/assets/templates/mobile/hubs/food-and-drink/restaurant-profile-event-listing.jst.eco",
		"/home/tad/code/concierge/app/assets/javascripts/mobile/views/mixins/items/organization-name.js.coffee",
		"/home/tad/code/concierge/app/controllers/whmobile/specials_controller.rb",
		"/home/tad/code/concierge/app/assets/templates/mobile/specials/item--no-image.jst.eco",
		"/home/tad/code/concierge/lib/concierge/card.rb",
		"/home/tad/scratch/restaurants_controller.rb",
		"/home/tad/code/concierge/app/assets/javascripts/common/views/item.js.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/mobile/views/home.js.coffee",
		"/home/tad/code/plasticdeath",
		"/home/tad/code/concierge/app/assets/javascripts/mobile/views/restaurants/specials.js.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/mobile/views/organization-item.js.coffee",
		"/home/tad/code/concierge/app/assets/templates/common/restaurant-item.jst.eco",
		"/home/tad/code/concierge/app/controllers/whmobile/pages_controller.rb",
		"/home/tad/code/concierge/app/models/inventory_item.rb",
		"/home/tad/code/concierge/app/assets/javascripts/common/routers/_base.js.coffee",
		"/home/tad/code/concierge/config.ru",
		"/home/tad/apartments",
		"/home/tad/code/concierge/app/models/ability.rb",
		"/home/tad/code/concierge/app/assets/javascripts/concierge-scripts/models/base/menu-item.js.coffee",
		"/home/tad/code/concierge/app/assets/javascripts/common/common.js.coffee",
		"/home/tad/file",
		"/home/tad/code/phpProjects/snake/file",
		"/media/Storage/warez/Adobe CS5/serial.txt",
		"/media/Storage/warez/Adobe CS5/file",
		"/home/tad/code/phpProjects/helpdesk/application/modules/helpdesk/models/Mailer.php",
		"/home/tad/code/phpProjects/boss.zf1/README",
		"/home/tad/code/phpProjects/boss.zf1/API Design notes",
		"/home/tad/code/phpProjects/boss/app/config/security.yml",
		"/home/tad/code/phpProjects/boss/app/config/routing_dev.yml",
		"/home/tad/code/phpProjects/boss/src/Ezmac/BossBundle/Controller/QueueController.php"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			"/home/tad/code/concierge/spec",
			"/home/tad/code/concierge",
			"/home/tad/code/concierge/app/",
			"/home/tad/code/concierge/app/assets/",
			"/home/tad/code/concierge/app/assets/javascripts",
			"/home/tad/code/concierge"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"layout",
			"5",
			"tag",
			"tags",
			"delightful.widgets",
			"[^\\+].*\\+",
			"[^\\+].*+",
			"apt",
			"\\$ ",
			"^[^$].*",
			"featured",
			"tags",
			"put",
			"organizations",
			"events",
			"tags",
			"icon",
			"has_one",
			"place",
			"organization",
			"event",
			"events",
			"featured_event",
			"special",
			"debugger",
			"ids",
			"\n        ",
			"open_all_",
			"open_all",
			"with_hours",
			"event",
			"events",
			"'([\\w]*)' \\|\\| '([\\w]*)'",
			"joins =\\[:organization,:([\\w_]*)]",
			":Recurs",
			"specialsTable = SpecialRecurs([\\w]*)",
			"debugger",
			"then",
			"level",
			"debugger",
			"debug",
			"special",
			" or ",
			", :place",
			":organizations",
			"title",
			"edge",
			"place",
			"          \"name\":",
			"level",
			"if",
			"organization_event_maps",
			"specials",
			"menu_item_images",
			"WHMobile.Views.Cards.Event",
			"WHMobile.Views.PaneFrontPage",
			"Common.Views.Base",
			"class WHMobile.Views.Base",
			"WHMobile.Views.Base",
			"WHMobile.Views.Cards",
			"mobile/cards/special-listing--none",
			"WHMobile.Views.Card",
			"class WHMobile.Views.CardContainer",
			"class WHMobile.Views.Panes",
			"panes.event",
			"panes.food",
			"class WHMobile.Views.Panes.",
			"MenuItemPreview",
			"itempreview",
			"WHMobile.Views.Panes.MenuItemPreview",
			"WHMobile.Views.Cards.TodaysSpecials",
			"debugger",
			"seeAllUpcomingEvents",
			"cardcontainer",
			"card-container",
			"debugger",
			"restaurantsspecials",
			"specials",
			"restaurantspecials",
			"specials",
			"restauranthub",
			"restaurantsall",
			"swaptab",
			"WHMobile.Routers.Base",
			"swapTab",
			"WHMobile.Views.AllSpecials",
			"RestaurantsSpecialsHub",
			"restaurantsShowSpecialsTest",
			"test",
			"specials",
			"restaurantsShowSpecials",
			"restaurantsShowMenus",
			"getJson",
			"class WHMobile.Views.Specials",
			"profileView",
			"_findOrCreateProfile",
			"WHMobile.Views.RestaurantProfile",
			"_findOrCreateRestaurantProfile",
			"profileRegion",
			"_findOrCreateProfile",
			"_findOrCreateRestaurantProfile",
			" WHMobile.Views.Specials",
			"WHMobile.Views.RestaurantProfile",
			"_findOrCreateRestaurantProfile",
			"specials",
			"restaurantHub",
			"WHMobile.Views.RestaurantHub",
			"RestaurantSpecialsHub",
			"WHMobile.Views.RestaurantHub",
			"RestaurantSpecialsHub",
			"allRestaurantsSpecials",
			"WHMobile.Views.RestaurantHub",
			"restaurantHub",
			"restaurantsShowSpecials",
			"WHMobile.Views.RestaurantHub",
			"WHMobile.Views.Hub",
			"new WHMobile.Views.Hub",
			"WHMobile.Views.Hub",
			"extends WHMobile.Views.Region",
			"model.get(\"name\")",
			"allspecials",
			"_fetchSpecials",
			"class WHMobile.Views.Region",
			"WHMobile.Views.Region",
			"allspecials",
			"WHMobile.Views.Profile",
			"WHMobile.Views.RestaurantProfile",
			"_findOrCreateRestaurantProfile"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": true,
		"regex": true,
		"replace_history":
		[
			"sudo apt",
			"",
			"event",
			"",
			"event",
			"special",
			"specials",
			"'\\1','\\2'",
			"joins << :\\1",
			":recurs",
			"joins =[:organization,:recurs_\\1]",
			"",
			" || ",
			"",
			":organization",
			"RestaurantsSpecialsHub",
			"RestaurantSpecialsHub",
			"",
			"\"",
			"src=\"http://www.chronica.msstate.edu/",
			"http://www.chronica.msstate.edu/",
			"identifier",
			"\\n",
			" -f\\\\n",
			"git rm ",
			"",
			"http://digital.library.msstate.edu/cdm/search/collection/\\2/searchterm/\\1/field/null/mode/all/conn/and/order/nosort",
			"",
			"acl",
			"ON",
			"\\n",
			"=\\n",
			"0664",
			"0755",
			"$$",
			"https://"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "rc.lua.new",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 41271,
						"regions":
						{
						},
						"selection":
						[
							[
								21878,
								21878
							]
						],
						"settings":
						{
							"highlight_line": false,
							"syntax": "Packages/Lua/Lua.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"vintage":
							{
								"action": null,
								"action_digits":
								[
								],
								"cancel_action": false,
								"expecting_register": false,
								"expecting_user_input": false,
								"mode": 2,
								"motion": null,
								"motion_digits":
								[
								],
								"next_mode": 2,
								"next_mode_command": null,
								"register": null,
								"stashed_action": null,
								"user_action_input": null,
								"user_input": null,
								"user_motion_input": null,
								"xpos": 34
							}
						},
						"translation.x": 0.0,
						"translation.y": 1419.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "rc.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 36587,
						"regions":
						{
						},
						"selection":
						[
							[
								3600,
								3600
							]
						],
						"settings":
						{
							"highlight_line": false,
							"syntax": "Packages/Lua/Lua.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"vintage":
							{
								"action": null,
								"action_digits":
								[
								],
								"cancel_action": false,
								"expecting_register": false,
								"expecting_user_input": false,
								"mode": 2,
								"motion": null,
								"motion_digits":
								[
								],
								"next_mode": 2,
								"next_mode_command": null,
								"register": null,
								"stashed_action": null,
								"user_action_input": null,
								"user_input": null,
								"user_motion_input": null,
								"xpos": 0
							}
						},
						"translation.x": 0.0,
						"translation.y": 1190.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 38504,
						"regions":
						{
						},
						"selection":
						[
							[
								34362,
								34362
							]
						],
						"settings":
						{
							"highlight_line": false,
							"syntax": "Packages/Lua/Lua.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"vintage":
							{
								"action": null,
								"action_digits":
								[
								],
								"cancel_action": false,
								"expecting_register": false,
								"expecting_user_input": false,
								"mode": 2,
								"motion": null,
								"motion_digits":
								[
								],
								"next_mode": 2,
								"next_mode_command": null,
								"register": null,
								"stashed_action": null,
								"user_action_input": null,
								"user_input": null,
								"user_motion_input": null,
								"xpos": 36
							}
						},
						"translation.x": 0.0,
						"translation.y": 9542.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 3,
					"file": "/home/tad/.config/awesome_partially_done/rc.lua.new",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21964,
						"regions":
						{
						},
						"selection":
						[
							[
								10774,
								10774
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"vintage":
							{
								"action": null,
								"action_digits":
								[
								],
								"cancel_action": false,
								"expecting_register": false,
								"expecting_user_input": false,
								"mode": 2,
								"motion": null,
								"motion_digits":
								[
								],
								"next_mode": 2,
								"next_mode_command": null,
								"register": null,
								"stashed_action": null,
								"user_action_input": null,
								"user_input": null,
								"user_motion_input": null,
								"xpos": 43
							}
						},
						"translation.x": 0.0,
						"translation.y": 3129.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "rc.lua.blackburn",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 34666,
						"regions":
						{
						},
						"selection":
						[
							[
								274,
								274
							]
						],
						"settings":
						{
							"syntax": "Packages/Lua/Lua.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"vintage":
							{
								"action": null,
								"action_digits":
								[
								],
								"cancel_action": false,
								"expecting_register": false,
								"expecting_user_input": false,
								"mode": 2,
								"motion": null,
								"motion_digits":
								[
								],
								"next_mode": 2,
								"next_mode_command": null,
								"register": null,
								"stashed_action": null,
								"user_action_input": null,
								"user_input": null,
								"user_motion_input": null,
								"xpos": 0
							}
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "rc.lua.powerarrow-darker",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 36563,
						"regions":
						{
						},
						"selection":
						[
							[
								447,
								447
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"vintage":
							{
								"action": null,
								"action_digits":
								[
								],
								"cancel_action": false,
								"expecting_register": false,
								"expecting_user_input": false,
								"mode": 2,
								"motion": null,
								"motion_digits":
								[
								],
								"next_mode": 2,
								"next_mode_command": null,
								"register": null,
								"stashed_action": null,
								"user_action_input": null,
								"user_input": null,
								"user_motion_input": null,
								"xpos": 39
							}
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 19.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.527035434977,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 82.0
	},
	"project": "awesome.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"speciacon",
				"app/controllers/consie/specials_controller.rb"
			],
			[
				"eventcon",
				"app/controllers/consie/events_controller.rb"
			],
			[
				"orcospe",
				"spec/controllers/consie/organizations_controller_spec.rb"
			],
			[
				"eventur",
				"app/models/event_url.rb"
			],
			[
				"event_sh",
				"app/models/event_short_description.rb"
			],
			[
				"event.",
				"app/models/event.rb"
			],
			[
				"routes",
				"config/routes.rb"
			],
			[
				"orgcon",
				"app/controllers/consie/organizations_controller.rb"
			],
			[
				"eventcont",
				"app/controllers/consie/events_controller.rb"
			],
			[
				"evconspe",
				"spec/controllers/consie/events_controller_spec.rb"
			],
			[
				"organiz",
				"app/models/organization.rb"
			],
			[
				"organizationev",
				"app/models/organization_event_map.rb"
			],
			[
				"71",
				"tmp/cache/assets/CAD/710/sprockets%2Fc03e6bd578aad553026cd90188194426"
			],
			[
				"organ",
				"app/models/organization.rb"
			],
			[
				"events_",
				"app/controllers/consie/events_controller.rb"
			],
			[
				"events_cont",
				"app/controllers/concierge/events_controller.rb"
			],
			[
				"specialsc",
				"app/controllers/consie/specials_controller.rb"
			],
			[
				"events_controller_spe",
				"spec/controllers/consie/events_controller_spec.rb"
			],
			[
				"closed",
				"app/models/closed_organization.rb"
			],
			[
				"specials_cont",
				"spec/controllers/consie/specials_controller_spec.rb"
			],
			[
				"specials_con",
				"spec/controllers/consie/specials_controller_spec.rb"
			],
			[
				"tag",
				"app/models/tag.rb"
			],
			[
				"event",
				"spec/factories/event.rb"
			],
			[
				"events_con",
				"app/controllers/consie/events_controller.rb"
			],
			[
				"org",
				"app/models/organization.rb"
			],
			[
				"or",
				"app/models/organization.rb"
			],
			[
				"orga",
				"app/models/organization.rb"
			],
			[
				"events_controller_spec",
				"spec/controllers/consie/events_controller_spec.rb"
			],
			[
				"application",
				"app/controllers/consie/application_controller.rb"
			],
			[
				"specials_",
				"app/controllers/consie/specials_controller.rb"
			],
			[
				"special_contr",
				"spec/controllers/consie/specials_controller_spec.rb"
			],
			[
				"application_cont",
				"app/controllers/consie/application_controller.rb"
			],
			[
				"special_re",
				"app/models/special_recurs_saturday.rb"
			],
			[
				"special.rb",
				"app/models/special.rb"
			],
			[
				"spec.rb",
				"spec/api/events_spec.rb"
			],
			[
				"moment.js",
				"vendor/assets/javascripts/moment.min.js"
			],
			[
				"specialrec",
				"app/models/special_recurs_friday.rb"
			],
			[
				"specia",
				"app/models/special.rb"
			],
			[
				"event.rb",
				"app/models/event.rb"
			],
			[
				"special.r",
				"app/models/special.rb"
			],
			[
				"specialtitle",
				"app/models/special_title.rb"
			],
			[
				"specialall",
				"app/models/special_all_day.rb"
			],
			[
				"place",
				"app/models/place.rb"
			],
			[
				"menu_item",
				"app/models/menu_item.rb"
			],
			[
				"eventtag",
				"app/models/event_tag_map.rb"
			],
			[
				"tag.",
				"app/models/tag.rb"
			],
			[
				"event.r",
				"app/models/event.rb"
			],
			[
				"featured",
				"app/models/featured_event.rb"
			],
			[
				"organi",
				"app/models/organization.rb"
			],
			[
				"o",
				"app/models/organization.rb"
			],
			[
				"events_controller",
				"app/controllers/consie/events_controller.rb"
			],
			[
				"restaur",
				"app/controllers/whmobile/restaurants_controller.rb"
			],
			[
				"restaurant",
				"app/controllers/whmobile/restaurants_controller.rb"
			],
			[
				"events_contr",
				"app/controllers/whatshappenin/events_controller.rb"
			],
			[
				"special-listing",
				"app/assets/templates/mobile/cards/special-listing.jst.eco"
			],
			[
				"special-listing--",
				"app/assets/templates/mobile/cards/special-listing--none.jst.eco"
			],
			[
				"app.js",
				"app/assets/javascripts/mobile/routers/app.js.coffee"
			],
			[
				"app.jso",
				"app/assets/javascripts/mobile/routers/app.js.coffee"
			],
			[
				"config/en",
				"config/environments/development.rb"
			],
			[
				"env",
				"config/environment.rb"
			],
			[
				"restaurants_",
				"app/controllers/whmobile/restaurants_controller.rb"
			],
			[
				"route",
				"config/routes.rb"
			],
			[
				"routes.rb",
				"config/routes.rb"
			],
			[
				"restaurants",
				"app/controllers/whmobile/restaurants_controller.rb"
			],
			[
				"models/",
				"app/models/event.rb"
			],
			[
				"app.js.coffee",
				"app/assets/javascripts/mobile/routers/app.js.coffee"
			],
			[
				"restaurant-specia",
				"app/assets/javascripts/mobile/views/restaurants/restaurant-specials.js.coffee"
			],
			[
				"dev",
				"config/environments/development.rb"
			],
			[
				"restau",
				"app/controllers/whmobile/restaurants_controller.rb"
			],
			[
				"special.js.coffee",
				"app/assets/javascripts/concierge-scripts/models/base/special.js.coffee"
			],
			[
				"--noimage",
				"app/assets/templates/mobile/specials/item--no-image-show-restaurant.jst.eco"
			],
			[
				"devel",
				"config/environments/development.rb"
			],
			[
				"specials",
				"app/assets/javascripts/concierge-scripts/collections/specials.js.coffee"
			],
			[
				"restauran",
				"app/controllers/whmobile/restaurants_controller.rb"
			],
			[
				"restaurant_con",
				"app/controllers/whmobile/restaurants_controller.rb"
			],
			[
				"specials.js.c",
				"app/assets/javascripts/mobile/views/specials.js.coffee"
			],
			[
				"stack",
				"app/assets/javascripts/common/views/stack-items.js.coffee"
			],
			[
				"card.js",
				"app/assets/javascripts/mobile/views/card.js.coffee"
			],
			[
				"card",
				"lib/concierge/card.rb"
			],
			[
				"all-resta",
				"app/assets/javascripts/mobile/views/all-restaurant-specials.js.coffee"
			],
			[
				"resta",
				"app/controllers/whmobile/restaurants_controller.rb"
			],
			[
				"restaurant-spec",
				"app/assets/javascripts/mobile/views/restaurants/restaurant-specials.js.coffee"
			],
			[
				"restaurant-specials",
				"app/assets/javascripts/mobile/views/restaurants/restaurant-specials.js.coffee"
			],
			[
				"deve",
				"config/environments/development.rb"
			],
			[
				"app.js.c",
				"app/assets/javascripts/mobile/views/app.js.coffee"
			],
			[
				"views.js.coffee",
				"app/assets/javascripts/mobile/views/specials.js.coffee"
			],
			[
				"special",
				"app/assets/javascripts/concierge-scripts/collections/specials.js.coffee"
			],
			[
				"stackitem",
				"app/assets/javascripts/common/views/stack-items.js.coffee"
			],
			[
				"rout",
				"config/routes.rb"
			],
			[
				"config",
				"config/environments/development.rb"
			],
			[
				"conf",
				"config.ru"
			],
			[
				"",
				"app/models/organization.rb"
			],
			[
				"restara",
				"app/controllers/whmobile/restaurants_controller.rb"
			],
			[
				"restaurant-item",
				"app/assets/templates/common/restaurant-item.jst.eco"
			],
			[
				"speci",
				"app/models/special.rb"
			],
			[
				"ability",
				"app/models/ability.rb"
			],
			[
				"abili",
				"app/models/ability.rb"
			],
			[
				"parameterba",
				"vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"/home/tad/code/megalodon/megalodon.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
		"vintage":
		{
			"last_buffer_search": "tags"
		}
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 146.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
